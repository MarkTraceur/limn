Backbone = require 'backbone'

limn = require '../client'
{ _, op,
} = require '../util'
{ BaseBackboneMixin, mixinBase,
} = require './base-mixin'



/**
 * @class Base model, extending Backbone.Model, used by scaffold and others.
 * @extends Backbone.Model
 */
BaseModel = exports.BaseModel = Backbone.Model.extend mixinBase do # {{{
    
    constructor : function BaseModel
        @__class__      = @constructor
        @__superclass__ = @..__super__.constructor
        @waitingOn      = 0
        Backbone.Model ...
        # @..trigger 'create', this
    
    initialize : (attributes, options) ->
        @__apply_bind__()
        @__apply_opt2attr__ options
    
    
    
    ### Accessors
    
    url: ->
        "#{limn.mount @urlRoot}/#{@get('id')}.json"
    
    has: (key) ->
        @get(key)?
    
    get: (key) ->
        _.getNested @attributes, key
    
    # TODO: nested sets, handling events
    
    # set: (key, value, opts) ->
    #     if _.isObject(key) and key?
    #         [values, opts] = [key, value]
    #     else
    #         values = { "#key": value }
    #     
    #     # TODO: Validation
    #     @_changed or= {}
    #     
    #     for key, value in values
    #         if _.str.contains key, '.'
    #             _.setNested @attributes, key, value, opts
    #         else
    #             Backbone.Model::set.call this, key, value, opts
    #     
    #     this
    # 
    # unset : (key, opts) ->
    #     
    
    
    ### Data & Model Loading
    
    /**
     * Override to customize what data or assets the model requires,
     * and how they should be loaded.
     * 
     * By default, `load()` simply calls `loadModel()` via `loader()`.
     * 
     * @see BaseModel#loader
     * @see BaseModel#loadModel
     * @returns {this}
     */
    load: ->
        console.log "#this.load()"
        @loader do
            start         : @loadModel
            completeEvent : 'fetch-success'
        this
    
    
    /**
     * Wraps the loading workflow boilerplate:
     *  - Squelches multiple loads from running at once
     *  - Squelches loads post-ready, unless forced
     *  - Triggers a start event
     *  - Triggers "ready" when complete
     *  - Wraps workflow with wait/unwait
     *  - Cleans up "loading" state
     * 
     * @protected
     * @param {Object} [opts={}] Options:
     * @param {Function} opts.start Function that starts the loading process. Always called with `this` as the context.
     * @param {String} [opts.startEvent='load'] Event to trigger before beginning the load.
     * @param {String} [opts.completeEvent='load-success'] Event which signals loading has completed successfully.
     * @param {String} [opts.errorEvent='load-error'] Event which signals loading has completed but failed.
     * @param {Boolean} [opts.force=false] If true, reset ready state if we're ready before proceeding.
     * @param {Boolean} [opts.readyIfError=false] If true, move fire the ready event when loading completes, even if it failed.
     * @returns {this}
     */
    loader: (opts={}) ->
        opts = {
            -force
            -readyIfError
            startEvent    : 'load'
            completeEvent : 'load-success'
            errorEvent    : 'load-error'
            ...opts
        }
        @resetReady() if opts.force
        throw new Error('You must specify a `start` function to start loading!') unless opts.start
        return this if @loading or @ready
        
        @wait()
        @loading = true
        @trigger opts.startEvent, this
        
        # Register a handler for the post-load event that will run only once
        @once opts.completeEvent, ~>
            # console.log "#{this}.onLoadComplete()"
            @loading = false
            @unwait() # terminates the `load` wait
            @trigger 'load-success', this unless opts.completeEvent is 'load-success'
            @triggerReady()
        @once opts.errorEvent, ~>
            # console.log "#{this}.onLoadError()"
            @loading = false
            @unwait() # terminates the `load` wait
            @trigger 'load-error', this unless opts.errorEvent is 'load-error'
            @triggerReady() if opts.readyIfError
        
        # Finally, start the loading process
        opts.start.call this
        this
    
    /**
     * Runs `.fetch()`, triggering a `fetch` event at start, and
     * `fetch-success` / `fetch-error` on completion.
     * 
     * @protected
     * @returns {this}
     */
    loadModel: ->
        @wait()
        @trigger 'fetch', this
        @fetch do
            success : ~> @unwait(); @trigger 'fetch-success', this
            error   : ~> @unwait(); @trigger 'fetch-error',   this, ...arguments
        this
    
    
    ### Serialization
    
    serialize: (v) ->
        # if v!?
        #     v = ''
        if _.isBoolean v
            v =  Number v
        else if _.isObject v
            v = JSON.stringify v
        String v
    
    /**
     * Like `.toJSON()` in that it should return a plain object with no functions,
     * but for the purpose of `.toKV()`, allowing you to customize the values
     * included and keys used.
     * 
     * @param {Object} [opts={}] Options:
     * @param {Boolean} [opts.keepFunctions=false] If false, functions will be omitted from the result.
     * @returns {Object}
     */
    toKVPairs: (opts={}) ->
        opts = {-keepFunctions, ...opts}
        kvo = _.collapseObject @toJSON()
        for k, v in kvo
            kvo[k] = @serialize v if opts.keepFunctions or typeof v is not 'function'
        kvo
    
    /**
     * Serialize the model into a `www-form-encoded` string suitable for use as
     * a query string or a POST body.
     * @returns {String}
     */
    toKV: (item_delim='&', kv_delim='=') ->
        _.toKV @toKVPairs(), item_delim, kv_delim
    
    /**
     * @returns {String} URL identifying this model.
     */
    toURL: ->
        "?#{@toKV ...}"
    
    toString: ->
        "#{@getClassName()}(cid=#{@cid}, id=#{@id})"


# Class Methods
BaseModel import do
    /**
     * Factory method which constructs an instance of this model from a string of KV-pairs.
     * This is a class method inherited by models which extend {BaseModel}.
     * @static
     * @param {String|Object} o Serialized KV-pairs (or a plain object).
     * @returns {BaseModel} An instance of this model.
     */
    fromKV: (o, item_delim='&', kv_delim='=') ->
        o   = _.fromKV o, item_delim, kv_delim if typeof o is 'string'
        Cls = if typeof this is 'function' then this else this.constructor
        new Cls _.uncollapseObject o

# }}}



/**
 * @class Base collection, extending Backbone.Collection, used by scaffold and others.
 * @extends Backbone.Collection
 */
BaseList = exports.BaseList = Backbone.Collection.extend mixinBase do # {{{
    
    constructor : function BaseList
        @__class__      = @constructor
        @__superclass__ = @..__super__.constructor
        @waitingOn      = 0
        Backbone.Collection ...
        # @trigger 'create', this
    
    
    getIds: ->
        @models.map -> it.id or it.get('id') or it.cid
    
    url: ->
        root = limn.mount @urlRoot
        id = @get('id') or @get('slug')
        if id
            "#root/#id.json"
        else
            "#root.json"
    
    
    load: ->
        @loadCollection()
    
    loadCollection: ->
        @wait()
        @trigger 'load', this
        @fetch do
            success : ~> @unwait(); @trigger 'load-success', this
            error   : ~> @unwait(); @trigger 'load-error',   this, ...arguments
        this
    
    
    ### Serialization
    
    toKVPairs: ->
        _.collapseObject @toJSON()
    
    toKV: (item_delim='&', kv_delim='=') ->
        _.toKV @toKVPairs(), item_delim, kv_delim
    
    toURL: (item_delim='&', kv_delim='=') ->
        "?#{@toKV ...}"
    
    toString: ->
        "#{@getClassName()}[#{@length}]"
    
    toStringWithIds: ->
        modelIds = @models
            .map -> "\"#{it.id ? it.cid}\""
            .join ', '
        "#{@getClassName()}[#{@length}](#modelIds)"
# }}}


