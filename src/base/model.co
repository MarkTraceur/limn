{ _, op, root, generateId, guidFor,
} = require '../util'
{ EventEmitter, ReadyEmitter,
} = require 'emitters'
{ Resource,
} = require './resource'

ko     = require 'knockout'
unwrap = ko.utils.unwrapObservable




/**
 * @class Root-class for all Models.
 * @extends EventEmitter
 * @mixes Resource
 */
class exports.Model extends EventEmitter
    
    /**
     * Unique identifier for this object. Uniqueness is only guaranteed for this
     * pageload session; this value is safe to use in circumstances requiring numeric identity
     * (such as calculating a hashkey for a Map, or for DOM id attributes) but not when
     * global uniqueness is required.
     * 
     * @protected
     * @type String
     */
    __id__ : null
    
    /**
     * When set, this overrides the result of `isNew()`, allowing formerly saved
     * models to become new again.
     * 
     * @protected
     * @type Boolean
     */
    _isNew : null
    
    /**
     * Attribute data of the model. Individual properties are also aliased 
     * onto the model object itself if no property already exists.
     * 
     * @protected
     * @type Map<Key, ko.observable>
     */
    attributes : null
    
    /**
     * Maps attribute keys to sub-models.
     * 
     * @protected
     * @type Map<Key, ModelClass>
     */
    attributeTypes : null
    
    
    
    /**
     * @constructor
     */
    (attributes={}) ->
        @__id__            = generateId()
        @attributes        = {}
        @attributeTypes  or= {}
        
        # Resolve attributes
        attributes  = @canonicalize _.merge @defaults(), attributes
        @attributes = @generateAttributes attributes, @attributeTypes
        _.defaults this, @attributes
        
        # Build observables and computed property instances
        for name, fn in this
            continue unless typeof fn is 'function'
            continue if fn is @attributes[name]
            
            if fn.__computed__
                options = { read:fn, owner:this } import fn.__computed_options__
                this[name] = ko.computed(options)
            if fn.__async_computed__
                options = { read:fn, owner:this } import fn.__async_computed_options__
                this[name] = ko.computed(options).async({} import options)
            else if ko.isObservable fn
                this[name] = ko.utils.makeObservable fn.peek()
        
        this
    
    
    /**
     * Invoked to acquire default attribute values.
     * 
     * Note that *all* known attributes of the Model should be included -- even
     * if simply as `null` keys (even the `id` attribute, if the model has a concept
     * of server-side global uniqueness!) -- so we can create the observables
     * fields.
     * 
     * @returns {Object} Hash of default attribute values.
     */
    defaults: ->
        {}
    
    /**
     * Gets the value of the id attribute for this model.
     * @returns {String} Instance's id.
     */
    getId: ->
        @__id__
    
    /**
     * @returns {Boolean} Whether the model has been saved to the server.
     */
    isNew: ->
        if typeof @_isNew is 'boolean' then @_isNew else not @getId()?
    
    /**
     * Clone this model.
     * 
     * @returns {Model} A new instance of this model, bearing the same attributes.
     */
    clone: ->
        # TODO: @attributes might contain objects or models that need recursive cloning?
        json = @toJS @attributes
        ModelClass = @constructor
        new ModelClass json
    
    
    /* * * *  Knockout-Aware Accessors  * * * {{{ */
    
    /**
     * Gets the attribute value at `key`.
     * 
     * @param {String} key Key to get.
     * @returns {*} Value at `key`.
     */
    get: (key) ->
        unwrap @attributes?[key]
    
    /**
     * Gets the attribute value at `key`, circumventing dependency tracking.
     * 
     * @param {String} key Key to peek.
     * @returns {*} Value at `key`.
     */
    peek: (key) ->
        if ko.isObservable val = @attributes?[key]
            val.peek()
        else
            val
    
    /**
     * Puts a single attribute value to `key`.
     * 
     * @protected
     * @param {String} key Key to set.
     * @param {*} val Value to set at `key`.
     * @returns {this}
     */
    _set: (key, val) ->
        return this unless key?
        throw new Error "Attributes hash does not exist!" unless @attributes?
        unless ko.isObservable obs = @attributes[key]
            obs = @attributes[key] = @generateAttribute val, @attributeTypes[key]
            @[key] ?= obs
        else
            obs val
        this
    
    /**
     * Sets attribute values, taking either a single (key, value)-pair, or a map of them.
     * 
     * @param {String|Object} key The key to set. If an object is supplied here, each key will be set with its value on the target object.
     * @param {*} [value] Value to set at `key`. Omit this if an object of KV-pairs was passed as `key`.
     * @returns {this}
     */
    set: (key, val) ->
        return this unless key?
        if key and _.isObject(key)
            values = key
        else
            values = { "#key": val }
        for key, value in values
            @_set key, value
        this
    
    /**
     * Sets the attribute value at `key` to `undefined`.
     * 
     * @param {String} key Key to unset.
     * @returns {this}
     */
    unset: (key) ->
        @_set key, undefined
    
    /**
     * Sets the attribute value at `key` to `undefined`, and then removes
     * the observable from both the attributes hash and the instance (if attached).
     * 
     * @param {String} key Key to remove.
     * @returns {this}
     */
    remove: (key) ->
        return this unless key?
        throw new Error "Attributes hash does not exist!" unless @attributes?
        
        if ko.isObservable obs = @attributes[key]
            obs undefined
            obs.dispose?()
            delete @[key] if obs is @[key]
        
        delete @attributes[key]
        this
    
    /**
     * Updates model with new data such that it will only contain keys
     * found in the new attributes (and existing attributes will be unset).
     * 
     * @param {Object} values Key-value pairs to update.
     * @returns {this}
     */
    update: (values) ->
        throw new Error "Attributes hash does not exist!" unless @attributes?
        
        # Update the given attributes
        @set values
        
        # Then remove all missing keys
        for k of _.keys(@attributes)
            continue if k in values
            @remove k
        
        this
    
    /**
     * Delete all attributes from the model.
     * @returns {this}
     */
    clear: ->
        @update {}
    
    # }}}
    
    
    /**
     * Invoked to transform raw attribute data into its "proper" form for
     * this model, whatever that might be.
     * 
     * @param {Object} data Raw attributes to canonicalize.
     * @returns {Object} Converted raw data.
     */
    canonicalize: (data) ->
        data
    
    /**
     * Wraps the properties found in the `attributes` map with observables,
     * applying types as specified in `attrTypes`.
     * 
     * @param {Map} data Hash of nascent attributes.
     * @param {Map<Key, ModelClass>} [attrTypes={}] Model type to ensure.
     * @param {Object} [target={}] Hash to which nascent attributes shall be attached.
     * @returns {Object} The transformed attributes map.
     */
    generateAttributes: (data, attrTypes={}, target={}) ->
        return target unless data
        return _.reduce do
            data
            (attributes, val, key) ~>
                attributes[key] = @generateAttribute val, attrTypes[key]
                attributes
            target
    
    /**
     * Wraps a single attribute value with the appropriate observable machinery,
     * auto-coercing incoming data to `ModelType` if provided.
     * 
     * @param {*} val Initial value.
     * @param {Class<Model>} [ModelType] Model type to ensure.
     * @returns {ko.observable} The new observable attribute. You should assign
     *  this to the right place on `attributes`, bro.
     */
    generateAttribute: (val, ModelType) ->
        if _.isArray val
            obs = ko.observableArray val
        else
            if typeof ModelType is not 'function' and _.isPlainObject(val)
                val = @generateAttributes val, ModelType
            obs = ko.observable val
        obs = obs.typed ModelType if ModelType
        obs
    
    /**
     * Recursively unwrap any observables in the given attributes hash.
     * @returns {Object} A plain JS object, suitable for serialization.
     */
    toJS: (attributes=@attributes) ->
        # console.log "#{this}.toJS()", arguments
        _.reduce do
            attributes
            (json, obs, key) ~>
                val = if ko.isObservable obs then obs.peek() else obs
                if typeof val?.toJS is 'function'
                    val = val.toJS() ? val
                else if typeof val?.toJSON is 'function'
                    val = val.toJSON() ? val
                else if _.isPlainObject val
                    val = @toJS val
                json[key] = val if val?
                json
            {}
    
    toJSON: ->
        @toJS @attributes
    
    
    toString: ->
        cid       = @__id__
        id        = @peek(@idAttribute or 'id')
        Class     = @constructor
        className = Class.displayName or Class.name
        "#className(cid=#cid, id=#id)"
    
    
    
    /* * * *  Class Methods  * * * {{{ */
    
    # Make the Model class-object itself an event emitter, so it can fire global events
    this import EventEmitter::
    
    
    /**
     * @static
     * @returns {Function} Factory function that creates new instances of this Model.
     */
    @getFactory = ->
        ModelType = this
        return (attributes) -> new ModelType attributes
    
    /**
     * Decorates a method when attached to the class prototype so that it
     * becomes a computed property when the class is instantiated.
     * 
     * @static
     * @param {Object} [options] Options to pass to `ko.computed`.
     * @param {Function} method Method to decorate.
     * @returns {Function} Decorated method.
     */
    @computed = (options, method) ->
        [method, options] = [options, {}] if typeof options is 'function'
        method.__computed__ = true
        method.__computed_options__ = options
        method
    
    /**
     * Decorates a method when attached to the class prototype so that it
     * becomes an async computed property when the class is instantiated.
     * 
     * @static
     * @param {Function} method Method to decorate.
     * @returns {Function} Decorated method.
     */
    @asyncComputed = (options, method) ->
        [method, options] = [options, {}] if typeof options is 'function'
        method.__async_computed__ = true
        method.__async_computed_options__ = options
        method
    
    
    /**
     * Invoked when Model is extended; copies over all class methods to the Subclass (including this).
     * @protected
     * @static
     */
    @extended = (SubClass) ->
        SuperClass = this
        for own k, v in SuperClass
            SubClass[k] = v unless SubClass[k]
            # SubClass[k] = v unless _.contains <[ apply call constructor toString ]>, k
        SubClass.__super__ = SuperClass::
        SubClass
    
    # }}}


