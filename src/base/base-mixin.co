Backbone = require 'backbone'

{ _, op,
} = require '../util'



BaseBackboneMixin = exports.BaseBackboneMixin =
    
    initialize: ->
        @__apply_bind__()
    
    
    ### Auto-Bound methods
    
    /**
     * A list of method-names to bind on `initialize`; set this on a subclass to override.
     * @type Array<String>
     */
    __bind__ : []
    
    /**
     * Applies the contents of `__bind__`.
     */
    __apply_bind__: ->
        names = _ @pluckSuperAndSelf '__bind__' .chain().flatten().compact().unique().value()
        _.bindAll this, ...names if names.length
    
    
    ### Auto-Extract Options to Top-level Attributes
    
    /**
     * List of option-keys to be attached to the Model or View itself.
     * That is, `__opt2attr__ : <[ graph chart ]>` will set `this.graph`
     * and `this.chart` in `initialize()`.
     * @type Array<String>
     */
    __opt2attr__ : []
    
    /**
     * Applies the contents of `__opt2attr__`.
     */
    __apply_opt2attr__ : (options) ->
        return unless options
        names = _ @pluckSuperAndSelf '__opt2attr__' .chain().flatten().compact().unique().value()
        for name of names
            value = options[name]
            @[name] = value unless value is void
    
    
    ### Events
    
    /**
     * Whether we're ready.
     * @type Boolean
     */
    ready : false
    
    
    /**
     * Triggers the 'ready' event if it has not yet been triggered.
     * Subsequent listeners added on this event will be auto-triggered.
     * @returns {this}
     */
    triggerReady: (lock='ready', event='ready') ->
        return this if @[lock]
        @[lock] = true
        @trigger event, this
        this
    
    /**
     * Resets the 'ready' event to its non-triggered state, firing a
     * 'ready-reset' event.
     * @returns {this}
     */
    resetReady: (lock='ready', event='ready') ->
        return this unless @[lock]
        @[lock] = false
        @trigger "#event-reset", this
        this
    
    /**
     * Wrap {@link Backbone.Event#on} registration to handle registrations
     * on 'ready' after we've broadcast the event. Handler will always still
     * be registered, however, in case the emitter is reset.
     * 
     * @param {String} events Space-separated events for which to register.
     * @param {Function} callback
     * @param {Object} [context]
     * @returns {this}
     */
    on: (events, callback, context=this) ->
        return this if not callback
        Backbone.Events.on ...
        if @ready and _.contains events.split(/\s+/), 'ready'
            callback.call context, this
        this
    
    makeHandlersForCallback: (cb) ->
        success : ~> cb.call this, [null].concat arguments
        error   : ~> cb.call this, it
    
    
    
    
    ### Synchronization
    
    /**
     * Count of outstanding tasks.
     * @type Number
     */
    waitingOn : 0
    
    
    /**
     * Increment the waiting task counter.
     * @returns {this}
     */
    wait: ->
        count = @waitingOn
        @waitingOn += 1
        # console.log "#this.wait! #count --> #{@waitingOn}"
        # console.trace()
        @trigger('start-waiting', this) if count is 0 and @waitingOn > 0
        this
    
    /**
     * Decrement the waiting task counter.
     * @returns {this}
     */
    unwait: ->
        count = @waitingOn
        @waitingOn -= 1
        # console.warn "#this.unwait! #{@waitingOn} < 0" if @waitingOn < 0
        # console.log "#this.unwait! #count --> #{@waitingOn}"
        # console.trace()
        @trigger('stop-waiting', this) if @waitingOn is 0 and count > 0
        this
    
    /**
     * @param {Function} fn Function to wrap.
     * @returns {Function} A function wrapping the passed function with a call
     *  to `unwait()`, then delegating with current context and arguments.
     */
    unwaitAnd: (fn) ->
        self = this
        ->
            # console.log "#self.unwaitAnd( function #{fn.name or fn.displayName}() )"
            # console.trace()
            self.unwait(); fn ...
    
    
    
    ###
    
    getClassName: ->
        "#{@..displayName or @..name}"
    
    toString: ->
        "#{@getClassName()}()"




/**
 * @class Base mixin class. Extend this to create a new mixin, attaching the
 *  donor methods as you would instance methods.
 *  
 *  To mingle your mixin with another class or object:
 *  
 *  class MyMixin extends Mixin
 *      foo: -> "foo!"
 *  
 *  # Mix into an object...
 *  o = MyMixin.mix { bar:1 }
 *  
 *  # Mix into a Coco class...
 *  class Bar
 *      MyMixin.mix this
 *      bar : 1
 *  
 */
class exports.Mixin
    
    /**
     * Mixes this mixin into the target. If `target` is not a class, a new
     * object will be returned which inherits from the mixin.
     */
    @mix = (target) ->
        return that unless target
        
        MixinClass = Mixin
        MixinClass = @constructor   if this instanceof Mixin
        MixinClass = this           if this instanceof Function
        
        if typeof target is 'function'
            target:: import MixinClass::
        else
            target = new MixinClass() import target
            # target = _.clone(MixinClass::) import target
        
        (target.__mixins__ or= []).push MixinClass
        target
    
    /**
     * Coco metaprogramming hook to propagate class properties and methods.
     */
    @extended = (SubClass) ->
        SuperClass = this
        for own k, v in SuperClass
            SubClass[k] = v unless SubClass[k]
        SubClass



# /**
#  * @returns {Function} Function which takes a target object or class,
#  *  mixes the MixinClass into it, and then returns it. If the target is
#  *  not a class, a new object will be returned which inherits from the mixin.
#  */
# makeMixer = exports.makeMixer = (MixinClass) ->
#     mixinBody = if typeof MixinClass is 'function' then MixinClass:: else MixinClass
#     mixinMixer = (target) ->
#         if typeof target is 'function'
#             target:: import mixinBody
#         else
#             target = _.clone(mixinBody) import target
#         target
# 
# mixinBase = exports.mixinBase = makeMixer BaseBackboneMixin


/**
 * Mixes BaseBackboneMixin into another object or prototype.
 * @returns {Object} The merged prototype object.
 */
mixinBase = exports.mixinBase = (...bodies) ->
    # _.extend _.clone(BaseBackboneMixin), ...bodies
    _.extend ^BaseBackboneMixin, ...bodies



