_ = require 'underscore'
ko = require 'knockout'
{
    unwrapObservable : unwrap
    peekObservable   : peek
} = ko.utils

{ compareIds, OrderedSet, formatters,
} = require '../util'
{ View,
} = require '../base/view'
{ Dashboard,
} = require './dashboard-model'
{ DashboardTabView,
} = require './dashboard-tab-view'



class exports.DashboardView extends View
    template: 'dashboard'
    
    defaults: ->
        model       : null
        action      : null
        isDestroyed : false
        tabs        : []
    
    attributeTypes:
        tabs        : DashboardTabView
    
    
    (model, action) ->
        super()
        
        # Decorate properties we need to clean up with history tracking
        @tabs = @attributes.tabs = @tabs.history({ -includeInitial })
        @tabs.equalityComparer = compareIds
        
        if model instanceof Dashboard
            model.fetch()
        else if typeof model is 'string'
            model = Dashboard.load { id:model }
        else
            model = new Dashboard model
        
        @action action
        @model  model
        
        @watch()
    
    
    watchDeps: ->
        @model().tabs()
        @tabs()
    
    
    watchOthers : ->
        console.log "#this.watchOthers!"
        tabs = @watchModels()
        _.invoke @tabs(), 'watch'
        tabs
    
    
    watchModels : @computed ->
        console.log "#this.watchModels!"
        @tabs newModels = @model().tabs().slice()
        newModels
    
    
