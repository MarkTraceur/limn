{ View,
} = require '../base/view'
{ Dashboard,
} = require './dashboard-model'
{ DashboardTabView,
} = require './dashboard-tab-view'

class exports.DashboardView extends View
    template: 'dashboard'
    
    defaults: ->
        model       : null
        isDestroyed : false
        tabs        : []
    
    
    
    (model, action) ->
        super()
        
        if model instanceof Dashboard
            model.fetch()
        else if typeof model is 'string'
            model = Dashboard.load { id:model }
        else
            model = new Dashboard model
        
        @action action
        @model model
        
        if promise = model.fetch.promise
            promise.done ~>
                @model().fetchGraphs().done ~>
                    for tab of @model().tabs()
                        tabView = new DashboardTabView tab
                        @tabs.push tabView
        
        @watch()
    
    /**
     * Inform sub-objects its safe to begin their watchers.
     */
    watch : @computed ->
        @isWatching = true
        model       = @model().watch()
        tabs        = _.invoke @tabs(), 'watch'
        [ model, tabs ]
    
    
