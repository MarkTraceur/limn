d3 = require 'd3'
Seq = require 'seq'

{ _, op,
} = limn = require 'limn/client'


{ ChartElement,
} = require '../chart-element'


/**
 * @class
 * @extends ChartElement
 */
LegendElement = exports.LegendElement = ChartElement.extend do # {{{
    __bind__    : <[ ]>
    typeName    : 'LegendElement'
    tagName     : 'fieldset'
    className   : 'legend'
    notSVG      : true
    
    viewEvents:
        'changed:data'  : 'onChangedData'
        'hover:xDomain' : 'onHoverX'
    
    constructor: function LegendElement
        ChartElement ...
    
    initialize: ->
        LegendElement.__super__.initialize ...
        @$el.append "<legend></legend>"
        @legend = @$el.find('legend')
        @$el.append '<ul></ul>'
        @list = @$el.find('ul')
        
        @legend.text @model.get 'label'
    
    onChangedData: ->
        chart = @chart
        legendItemData = @sel.select 'ul' .selectAll 'li'
            .data @chart.metricLabels
        
        legendItem = legendItemData.enter().append 'li'
            .attr 'data-metricIndex', (d, i) -> i
        legendItem.append 'span'
            .text (d) -> d
            .classed 'legendItemText', true
            .style 'color', (d) -> chart.colorScale d
        legendItem.append 'span'
            .classed 'legendItemValue', true

        legendItemData.exit().remove()
    
    onHoverX: (xOffset) ->
        chart = @chart
        domainValue = chart.xScale.invert(xOffset)
        domainValueOffCenter = chart.xScale.invert(xOffset + chart.dx)
        @legend.text chart.dateFormatter(domainValueOffCenter)
        @list.find('li').each ->
            metricIndex = $(@).data().metricindex
            dataSet = chart.metricDataByIndex[metricIndex]
            dataIndex = chart.findDomainIndex(domainValue)
            $(@).find('span.legendItemValue').text chart.numberFormatter(
                dataSet[dataIndex]
            )
    
