d3 = require 'd3'
Seq = require 'seq'

{ _, op,
} = limn = require 'limn/client'
{ ChartElementData,
} = require '../chart-element-data'
{ ChartElement,
} = require '../chart-element'


/**
 * @class
 * @extends ChartElement
 * Adds a line which can be used to track mouse movement along data
 * implemented options:
 *      dimension:
 *          x: this line will be set up to track the mouse along the x axis
 */
LineGuideChartElement = exports.LineGuideChartElement = ChartElement.extend do # {{{
    __bind__        : <[  ]>
    typeName        : 'LineGuideChartElement'
    tagName         : 'g'
    className       : 'guide'
    defaultX        : -10000
    viewEvents      :
        'layout:chart'  : 'onLayoutChart'
        'hover:xDomain' : 'onHoverX'
        'hover:out'     : 'onHoverOut'
    
    
    constructor: function LineGuideChartElement
        ChartElement ...
    
    initialize: ->
        ChartElement::initialize ...
        @line = @sel.append('line')
            .attr 'pointer-events', 'none'
        
        @options = @model.get 'options'
        @dimension = @options.dimension
    
    onLayoutChart: ->
        switch @dimension
            case 'x'
                @line
                    .classed 'verticalGuide', true
                    .attr 'y1', @chart.layout.viewport.h
                    .attr 'y2', 0
    
    onHoverOut: ->
        switch @dimension
            case 'x'
                @chart.moveLine(@line, @defaultX)
    
    onHoverX: (xOffset) ->
        switch @dimension
            case 'x'
                guideLineOffset = @defaultX
                if 0 < xOffset && xOffset < @chart.layout.viewport.w
                    guideLineOffset = xOffset
                
                @chart.moveLine(@line, guideLineOffset)
    
# }}}
