d3 = require 'd3'
Seq = require 'seq'

{ _, op,
} = limn = require 'limn/client'
{ BaseView,
} = require '../../base'
{ ChartElementData,
} = require './chart-element-data'
{ ChartElement,
} = require './chart-element'
{ LineChartElement,
} = require './vis'
{ LegendElement,
} = require './meta'


/**
 * @class
 * @extends BaseView
 */
ChartView = exports.ChartView = BaseView.extend do # {{{
    __bind__  : <[ build ]>
    typeName  : 'ChartView'
    tagName   : 'section'
    className : 'chart'
    template : require '../../template/chart/chart-view'
    
    events : {}
    
    viewEvents :
        'render' : 'onRender'
    
    xScale : null
    yScale : null
    xScaleUnset : true
    yScaleUnset : true
    
    
    
    constructor: function ChartView (opts)
        BaseView ...
        @chart = this
    
    initialize: (opts) ->
        ChartView.__super__.initialize ...
        @xScale = d3.time.scale()
        @yScale = d3.scale.linear()
        @elements = ChartElement.createChildren this, { graph:@model, chart:this }
    
    updateScale: (dateCol, dataCol) ->
        dateCol = @xScale.domain().concat dateCol unless @xScaleUnset
        @xScale.domain d3.extent dateCol
        dataCol = @yScale.domain().concat dataCol unless @yScaleUnset
        @yScale.domain d3.extent dataCol
        @xScaleUnset = @yScaleUnset = false
        this
    
    
    
    
    ### Rendering {{{
    
    
    
    determineSize: (refEl=@$el) ->
        refEl = $ refEl
        modelW = width  = @model.get 'width'
        modelH = height = @model.get 'height'
        
        if width is 'auto'
            width = '100%'
        width ?= modelW
        
        if height is 'auto'
            height = '100%'
        height ?= modelH
        
        { width, height }
    
    
    build: ->
        return this unless @model?.dataReady
        ChartView.__super__.build ...
        @$ 'svg' .attr @determineSize()
        columnModel = new ColumnDataModel { columns:@model.columns, columnHeaders:@model.columnHeaders }
        # TODO: how do you copy models
        @addSubview new LineChartElement { model:columnModel, chart:this }
        @addSubview new LegendElement { model:columnModel, chart:this }
        this
    
    onRender: ->
        { width, height } = size = @determineSize()
        @$ 'svg' .attr size
        @xScale.range [ 0, width ]
        @yScale.range [ height, 0 ]
    
    # }}}

# }}}


# TODO: remove hacky model once I learn where it's supposed to go
{ BaseModel,
} = require '../../base'

ColumnDataModel = exports.ColumnDataModel = BaseModel.extend do
    columns: null
    columnHeaders: null
    constructor: function ColumnDataModel (opts)
        @columns = opts.columns
        @columnHeaders = opts.columnHeaders
        BaseModel ...
    initialize: (opts) ->
        ColumnDataModel.__super__.initialize ...
        @triggerReady
