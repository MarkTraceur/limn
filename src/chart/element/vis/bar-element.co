d3 = require 'd3'
Seq = require 'seq'

{ _, op,
} = limn = require 'limn/client'
{ ChartElementData,
} = require '../chart-element-data'
{ TimeseriesChartElement,
} = require './timeseries-element'


/**
 * @class
 * @extends TimeseriesChartElement
 */
BarChartElement = exports.BarChartElement = TimeseriesChartElement.extend do # {{{
    __bind__  : <[ ]>
    typeName  : 'BarChartElement'
    tagName   : 'g'
    className : 'bar-chart-element chart-element'
    
    viewEvents:
        'layout:chart': 'onLayoutChart'
        'changed:data': 'onChangedData'
    
    /**
     * the unique human-friendly text that describes this metric
     */
    label: null
    
    /**
     * the unique number that this metric can use to relate itself to other metric-specific objects
     */
    index: null
    
    /**
     * the data for this metric
     */
    data: null
    
    constructor: function BarChartElement
        TimeseriesChartElement ...
    
    initialize: ->
        BarChartElement.__super__.initialize ...
    
    onLayoutChart: ->
        # report as a metric to the chart
        chart = @chart
        options = @model.getOptions()
        dateCol = @model.getDateColumn()
        data = @model.getData()
        label = "#{options.label}"
        inverted = options.options.inverted
        if label.length is 0
            label = "#{@model.cid} (change)"
        index = @chart.addMetric label, dateCol, data
        color = @chart.colorScale label
        
        # metric bars
        offset = 0.7 * chart.dx
        width = 0.7 * chart.xStep
        @sel.attr 'data-metricIndex', index
        @sel.selectAll 'rect.metricBar'
            .data data
            .enter().append 'rect'
                .classed 'metricBar', true
                .attr 'y', (d) -> if inverted then 0 else chart.yScale(d)
                .attr 'x', (d, i) -> chart.xScale(chart.xSteps[i]) - offset
                .attr 'width', width
                .attr 'height', (d) -> if inverted then chart.yScale(d) else chart.layout.viewport.h - chart.yScale(d)
                .style 'stroke', color
                .style 'fill', color
    
    onChangedData: ->
        chart = @chart
        @sel.selectAll 'rect.metricBar'
            .transition()
            .attr 'height', chart.yScale
# }}}

