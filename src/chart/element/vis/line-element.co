d3 = require 'd3'
Seq = require 'seq'

{ _, op,
} = limn = require 'limn/client'
{ ChartElementData,
} = require '../chart-element-data'
{ TimeseriesChartElement,
} = require './timeseries-element'


/**
 * @class
 * @extends ChartElement
 */
LineChartElement = exports.LineChartElement = TimeseriesChartElement.extend do # {{{
    __bind__  : <[ build ]>
    typeName  : 'LineChartElement'
    tagName   : 'g'
    className : 'line-chart-element chart-element'
    
    
    constructor: function LineChartElement
        TimeseriesChartElement ...
    
    initialize: ->
        LineChartElement.__super__.initialize ...
    
    build: ->
        return this unless @model?.ready
        dateCol = @model.getDateColumn()
        dataCol = @model.getData()
        @chart.updateScale dateCol, dataCol
        data = d3.zip dateCol, dataCol
        
        X = (d,i) ~> @chart.xScale d[0]
        Y = (d,i) ~> @chart.yScale d[1]
        line = d3.svg.line().x(X).y(Y)
        
        @sel.selectAll 'path.line'
            .data d3.zip data.slice(0,-1), data.slice(1)
            .enter().append 'path'
                .attr 'd', line
                .attr 'class', (d, i) -> "metric line segment #i"
                # .style 'stroke', @model.getColor 'color'
        
    
# }}}

