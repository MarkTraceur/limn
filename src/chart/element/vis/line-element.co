d3 = require 'd3'
Seq = require 'seq'

{ _, op,
} = limn = require 'limn/client'
{ ChartElementData,
} = require '../chart-element-data'
{ TimeseriesChartElement,
} = require './timeseries-element'


/**
 * @class
 * @extends TimeseriesChartElement
 */
LineChartElement = exports.LineChartElement = TimeseriesChartElement.extend do # {{{
    __bind__  : <[ ]>
    typeName  : 'LineChartElement'
    tagName   : 'g'
    className : 'line-chart-element chart-element'
    
    viewEvents:
        'layout:chart': 'onLayoutChart'
        'changed:data': 'onChangedData'
    
    /**
     * the unique human-friendly text that describes this metric
     */
    label: null
    
    /**
     * the unique number that this metric can use to relate itself to other metric-specific objects
     */
    index: null
    
    /**
     * the data for this metric
     */
    data: null
    
    constructor: function LineChartElement
        TimeseriesChartElement ...
    
    initialize: ->
        LineChartElement.__super__.initialize ...
    
    onLayoutChart: ->
        # report as a metric to the chart
        options = @model.getOptions()
        dateCol = @model.getDateColumn()
        data = @model.getData()
        label = "#{options.label}"
        if label.length is 0
            label = "#{@model.cid} (change)"
        index = @chart.addMetric label, dateCol, data
        color = @chart.colorScale label
        
        # metric marker
        # TODO: make into an option
        @chart.defs.select 'g.metricDefs' .append 'marker'
            .attr 'id', (d, i) -> "metricPathDot#{index}"
            .attr 'markerUnits', 'userSpaceOnUse'
            .attr 'markerWidth', 14
            .attr 'markerHeight', 14
            .attr 'refX', 7
            .attr 'refY', 7
            .append 'circle'
                .attr 'r', 6
                .attr 'cx', 7
                .attr 'cy', 7
                .attr 'fill', color
                .attr 'stroke', color
        
        # metric lines
        @sel.selectAll 'path.metricLine'
            .data [data]
            .enter().append 'path'
                .attr 'd', @chart.lineGenerator
                .classed 'metricLine', true
                .attr 'data-metricIndex', index
                .style 'stroke', color
                .attr 'vector-effect', 'non-scaling-stroke'
                .attr 'marker-start', (d, i) -> "url(\#metricPathDot#{index})"
                .attr 'marker-mid', (d, i) -> "url(\#metricPathDot#{index})"
                .attr 'marker-end', (d, i) -> "url(\#metricPathDot#{index})"
    
    onChangedData: ->
        @sel.selectAll 'path.metricLine'
            .transition()
            .attr 'd', @chart.lineGenerator
# }}}
