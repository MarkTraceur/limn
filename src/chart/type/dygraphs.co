_ = require '../../util/underscore'
{ ChartType,
} = require './chart-type'


class exports.DygraphsChartType extends ChartType
    __bind__ : <[ dygNumberFormatter dygNumberFormatterHTML ]>
    SPEC_URL : '/schema/dygraph.json'
    
    # NOTE: ChartType.register() must come AFTER `typeName` declaration.
    typeName : 'dygraphs'
    ChartType.register this
    
    
    /**
     * Hash of role-names to the selector which, when applied to the view,
     * returns the correct element.
     * @type Object
     */
    roles :
        viewport : '.viewport'
        legend   : '.graph-legend'
    
    -> super ...
    
    
    
    ### Formatters {{{
    
    # XXX: Dygraphs-specific
    makeAxisFormatter: (fmttr) ->
        (n, granularity, opts, g) -> fmttr n, opts, g
    
    # XXX: Dygraphs-specific
    dygAxisDateFormatter: (n, granularity, opts, g) ->
        moment(n).format 'MM/YYYY'
    
    # XXX: Dygraphs-specific
    dygDateFormatter: (n, opts, g) ->
        moment(n).format 'DD MMM YYYY'
    
    # XXX: Dygraphs-specific
    dygNumberFormatter: (n, opts, g) ->
        digits = if typeof opts('digitsAfterDecimal') is 'number' then that else 2
        { whole, fraction, suffix } = @numberFormatter n, digits
        "#whole#fraction#suffix"
    
    # XXX: Dygraphs-specific
    dygNumberFormatterHTML: (n, opts, g) ->
        digits = if typeof opts('digitsAfterDecimal') is 'number' then that else 2
        # digits = opts('digitsAfterDecimal') ? 2
        { whole, fraction, suffix } = @numberFormatter n, digits
        # coco will trim the whitespace
        "<span class='value'>
        <span class='whole'>#whole</span>
        <span class='fraction'>#fraction</span>
        <span class='suffix'>#suffix</span>
        </span>"
    
    
    ### }}}
    ### Rendering {{{
    
    /**
     * Determines chart viewport size.
     * @return { width, height }
     */
    determineSize: ->
        modelW = width  = @model.get 'width'
        modelH = height = @model.get 'height'
        return { width, height } unless @view.ready and width and height
        
        viewport = @getElementsForRole 'viewport'
        legend   = @getElementsForRole 'legend'
        
        if width is 'auto'
            # Remove old style, as it confuses dygraph after options update
            delete viewport.prop('style').width
            vpWidth = viewport.innerWidth() or 300
            legendW = legend.outerWidth() or 228
            width = vpWidth - legendW - 10 - (vpWidth - legend.position().left - legendW)
        width ?= modelW
        
        if height is 'auto'
            # Remove old style, as it confuses dygraph after options update
            delete viewport.prop('style').height
            height = viewport.innerHeight() or 320
        height ?= modelH
        
        { width, height }
    
    
    /**
     * Transforms the domain objects into a hash of derived values using
     *  chart-type-specific keys.
     * @returns {Object} The derived chart options.
     */
    transform: ->
        dataset = @model.dataset
        options = @view.chartOptions() import @determineSize()
        options import do
            colors             : dataset.getColors()
            labels             : dataset.getLabels()
            labelsDiv          : @getElementsForRole 'legend' .0
            valueFormatter     : @dygNumberFormatterHTML
            axes:
                x:
                    axisLabelFormatter : @dygAxisDateFormatter
                    valueFormatter     : @dygDateFormatter
                y:
                    axisLabelFormatter : @makeAxisFormatter @dygNumberFormatter
                    valueFormatter     : @dygNumberFormatterHTML
    
    
    /**
     * @returns {Dygraph} The Dygraph chart object.
     */
    renderChart: (data, viewport, options, lastChart) ->
        @resizeViewport()
        
        # console.log "#this.render!"
        # _.dump options, 'options'
        
        # Always rerender the chart to sidestep the case where we need
        # to push defaults into Dygraphs to reset the current option state.
        lastChart?.destroy()
        new Dygraph viewport.0, data, options
    
    
    
    ### }}}


