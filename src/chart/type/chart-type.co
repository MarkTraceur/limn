moment = require 'moment'
Backbone = require 'backbone'

limn = require '../../client'
{ _, op,
} = require '../../util'
{ ReadyEmitter,
} = require '../../util/event'
{ Parsers, ParserMixin,
} = require '../../base'



/**
 * Map of known libraries by name.
 * @type Object
 */
KNOWN_CHART_TYPES = exports.KNOWN_CHART_TYPES = {}


/**
 * @class Abstraction of a chart-type or charting library, encapsulating its
 *  logic and options. In addition, a `ChartType` also mediates the
 *  transformation of the domain-specific data types (the model and its view)
 *  with its specific needs.
 *  
 *  `ChartType`s mix in `ParserMixin`: when implementing a `ChartType`, you can
 *  add or supplement parsers merely by subclassing and overriding the
 *  corresponding `parseXXX` method (such as `parseArray` or `parseDate`).
 * 
 * @extends EventEmitter
 * @borrows ParserMixin
 */
class exports.ChartType extends ReadyEmitter
    
    ### Class Methods
    
    /**
     * Register a new chart type.
     */
    @register = (Subclass) ->
        # console.log "ChartType.register(#Subclass)"
        KNOWN_CHART_TYPES[ Subclass::typeName ] = Subclass
    
    /**
     * Look up a `ChartType` by `typeName`.
     */
    @lookup = (name) ->
        name = name.get('chartType') if name instanceof Backbone.Model
        KNOWN_CHART_TYPES[name]
    
    /**
     * Look up a chart type by name, returning a new instance
     * with the given model (and, optionally, view).
     * @returns {ChartType}
     */
    @create = (model, view) ->
        # console.log "ChartType.create(#model) ->", model
        return null unless Type = @lookup model
        new Type model, view
    
    
    ### Class Properties
    /*
     * These are "class properties": each is set on the prototype at the class-level,
     * and the reference is therefore shared by all instances. It is expected you
     * will not modify this on the instance-level.
     */
    
    /**
     * URL for the Chart Spec JSON. Loaded once, the first time an instance of
     * that class is created.
     * @type String
     * @readonly
     */
    SPEC_URL : null
    
    /**
     * Chart-type name.
     * @type String
     * @readonly
     */
    typeName: null
    
    /**
     * Map of option name to ChartOption objects.
     * @type { name:ChartOption, ... }
     * @readonly
     */
    options : null
    
    /**
     * Ordered ChartOption objects.
     * 
     * This is a "class-property": it is set on the prototype at the class-level,
     * and the reference is shared by all instances. It is expected you will not
     * modify that instance.
     * 
     * @type ChartOption[]
     * @readonly
     */
    options_ordered : null
    
    /**
     * Hash of role-names to the selector which, when applied to the view,
     * returns the correct element.
     * @type Object
     */
    roles :
        viewport : '.viewport'
    
    /**
     * Whether the ChartType has loaded all its data and is ready.
     * @type Boolean
     */
    ready: false
    
    
    
    ### Instance properties
    
    /**
     * Model to be rendered as a chart.
     * @type Backbone.Model
     */
    model : null
    
    /**
     * View to render the chart into.
     * @type Backbone.View
     */
    view  : null
    
    /**
     * Last chart rendered by this ChartType.
     * @private
     */
    chart: null
    
    
    
    
    /**
     * @constructor
     */
    (@model, @view) ->
        @roles or= {}
        _.bindAll this, ...@__bind__ # TODO: roll up MRO
        @loadSpec() unless @ready
    
    
    # Builder Pattern
    withModel : (@model) -> this
    withView  : (@view)  -> this
    
    
    /**
     * Load the corresponding chart specification, which includes
     * info about valid options, along with their types and defaults.
     */
    loadSpec: ->
        return this if @ready
        proto = @constructor::
        url = (if limn.config.mount is not '/' then limn.config.mount else '') + @SPEC_URL
        jQuery.ajax do
            url      : url
            dataType : 'json'
            success  : (spec) ~>
                proto.spec = spec
                proto.options_ordered = spec
                proto.options = _.synthesize spec, -> [it.name, it]
                proto.ready = true
                @triggerReady()
            error: ~> console.error "Error loading #{@typeName} spec! #it"
        this
    
    
    /**
     * @returns {ChartOption} Get an option's spec by name.
     */
    getOption: (name, def) ->
        @options[name] or def
    
    
    /**
     * @returns {Object} An object, mapping from option.name to the
     *  result of the supplied function.
     */
    map: (fn, context=this) ->
        _.synthesize @options, ~> [it.name, fn.call(context, it, it.name, this)]
    
    
    /**
     * @param {String} attr Attribute to look up on each options object.
     * @returns {Object} Map from name to the value found at the given attr.
     */
    pluck: (attr) ->
        @map -> it[attr]
    
    
    /**
     * @returns {Boolean} Whether the supplied value is the same as
     *  the default value for the given key.
     */
    isDefault: (name, value) ->
        _.isEqual @getOption(name).default, value
    
    
    ### }}}
    ### Parsers & Serialization {{{
    
    /**
     * When implementing a ChartType, you can add or override parsers
     * merely by subclassing.
     * @borrows ParserMixin
     */
    ParserMixin.mix this
    
    /**
     * @returns {Function} Parser for the given option name.
     */
    getParserFor: (name) ->
        @getParser @getOption(name).type
    
    /**
     * Parses a single serialized option value into its proper type.
     * 
     * @param {String} name Option-name of the value being parsed.
     * @param {String} value Value to parse.
     * @returns {*} Parsed value.
     */
    parseOption: (name, value) ->
        @getParserFor(name)(value)
    
    /**
     * Parses options using `parseOption(name, value)`.
     * 
     * @param {Object} options Options to parse.
     * @returns {Object} Parsed options.
     */
    parseOptions: (options) ->
        out = {}
        for k, v in options
            out[k] = @parseOption k, v
        out
    
    
    /**
     * Serializes option-value to a String.
     * 
     * @param {*} v Value to serialize.
     * @param {String} k Option-name of the given value.
     * @returns {String} The serialized value
     */
    serialize: (v, k) ->
        # if v!?
        #     v = ''
        if _.isBoolean v
            v =  Number v
        else if _.isObject v
            v = JSON.stringify v
        String v
    
    
    ### }}}
    ### Formatters {{{
    
    /**
     * Formats a date for display on an axis: `MM/YYYY`
     * @param {Date} d Date to format.
     * @returns {String}
     */
    axisDateFormatter: (d) ->
        moment(d).format 'MM/YYYY'
    
    /**
     * Formats a date for display in the legend: `DD MMM YYYY`
     * @param {Date} d Date to format.
     * @returns {String}
     */
    dateFormatter: (d) ->
        moment(d).format 'DD MMM YYYY'
    
    /**
     * Formats a number for display, first dividing by the greatest suffix
     *  of {B = Billions, M = Millions, K = Thousands} that results in a
     *  absolute value greater than 0, and then rounding to `digits` using
     *  `result.toFixed(digits)`.
     * 
     * @param {Number} n Number to format.
     * @param {Number} [digits=2] Number of digits after the decimal to always display.
     * @param {Boolean} [abbrev=true] Expand number suffixes if false.
     * @returns {Object} Formatted number parts.
     */
    numberFormatter: (n, digits=2, abbrev=true) ->
        suffixes = do
            if abbrev
                [['B', 1000000000], ['M', 1000000], ['K', 1000], ['', NaN]]
            else
                [['Billion', 1000000000], ['Million', 1000000], ['', NaN]]
        
        for [suffix, d] of suffixes
            break if isNaN d
            if n >= d
                n = n / d
                break
        s = n.toFixed(digits)
        parts = s.split '.'
        whole = _.rchop parts[0], 3 .join ','
        fraction = '.' + parts.slice(1).join '.'
        { n, digits, whole, fraction, suffix, toString: -> 
            "#{@whole}#{@fraction}#{if abbrev then '' else ' '}#{@suffix}"
        }
    
    
    ### }}}
    ### Rendering {{{
    
    /**
     * Finds the element in the view which plays the given role in the chart.
     * Canonically, all charts have a "viewport" element. Other roles might
     * include a "legend" element, or several "axis" elements.
     * 
     * Default implementation looks up a selector in the `roles` hash, and if
     * found, queries the view for matching children.
     * 
     * @param {String} role Name of the role to look up.
     * @returns {jQuery|null} $-wrapped DOM element.
     */
    getElementsForRole: (role) ->
        return null unless @view
        if @roles[role]
            @view.$ that
        else
            null
    
    
    /**
     * Transform/extract the data for this chart from the model. Default
     * implementation calls `model.getData()`.
     * 
     * @returns {*} Data object for the chart.
     */
    getData: ->
        @model.getData()
    
    
    /**
     * Map from option-name to default value. Note that this reference will be
     * modified by `.render()`.
     * 
     * @returns {Object} Default options.
     */
    getDefaultOptions: ->
        @pluck 'default'
    
    
    
    
    /**
     * Resizes the HTML viewport. Override to disable, etc.
     */
    resizeViewport: ->
        size = @determineSize()
        @getElementsForRole 'viewport' .css size
        size
    
    /**
     * Determines chart viewport size.
     * @return { width, height }
     */
    determineSize: ->
        modelW = width  = @model.get 'width'
        modelH = height = @model.get 'height'
        return { width, height } unless @view.ready and width and height
        
        viewport = @getElementsForRole 'viewport'
        
        if width is 'auto'
            Width = viewport.innerWidth() or 300
        width ?= modelW
        
        if height is 'auto'
            height = viewport.innerHeight() or 320
        height ?= modelH
        
        { width, height }
    
    
    /**
     * Transforms domain data and applies it to the chart library to
     * render or update the corresponding chart.
     * 
     * @returns {Chart}
     */
    render: ->
        data       = @getData()
        options    = @getDefaultOptions() import @transform @model, @view
        viewport   = @getElementsForRole 'viewport'
        return @lastChart unless data?.length and viewport?.length
        @lastChart = @renderChart data, viewport, options, @chart
    
    
    /**
     * Transforms the domain objects into a hash of derived values using
     * chart-type-specific keys.
     * 
     * Default implementation returns `model.getOptions()`.
     * 
     * @returns {Object} The derived data.
     */
    transform: (model, view) ->
        @model.getOptions()
    
    
    /**
     * Called to render the chart.
     * 
     * @abstract
     * @returns {Chart}
     */
    renderChart: (data, viewport, options, lastChart) ->
        ...
    
    
    ### }}}

