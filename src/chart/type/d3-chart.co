d3 = require 'd3'
ColorBrewer = require 'colorbrewer'

{ _, op,
} = require '../../util'
{ ChartType,
} = require './chart-type'
{ D3ChartElement,
} = require './d3/d3-chart-element'


root = do -> this


class exports.D3ChartType extends ChartType
    __bind__ : <[ determineSize ]>
    SPEC_URL : '/schema/d3/d3-chart.json'
    
    # NOTE: ChartType.register() must come AFTER `typeName` declaration.
    typeName : 'd3-chart'
    ChartType.register this
    
    
    /**
     * Hash of role-names to the selector which, when applied to the view,
     * returns the correct element.
     * @type Object
     */
    roles :
        viewport : '.viewport'
        legend   : '.graph-legend'
    
    
    
    -> super ...
    
    
    getData: ->
        @model.dataset.getColumns()
    
    
    transform: ->
        dataset = @model.dataset
        options = @model.getOptions() import @determineSize()
        options import do
            colors             : dataset.getColors()
            labels             : dataset.getLabels()
        options
    
    
    renderChart: (data, viewport, options, lastChart) ->
        ### Starting with http://bost.ocks.org/mike/chart/
        

        # margin convention http://bl.ocks.org/3019563
        margin = {top: 20, right: 20, bottom: 20, left: 20}
        width  = 760 - margin.left - margin.right
        height = 320 - margin.top - margin.bottom

        xScale = d3.time.scale()
        yScale = d3.scale.linear()
        
        dates  = data[0]
        cols   = data.slice(1)
        
        # Calculate extents using all the data points (but not dates)
        # allValues = d3.merge @model.dataset.getDataColumns()
        allValues = d3.merge cols
        
        # Update the x-scale with the extents of the dates.
        xScale
            .domain d3.extent dates
            .range [ 0, width ]
        
        # Update the y-scale with the extents of the data.
        yScale
            .domain d3.extent allValues
            .range [ height, 0 ]
        
        
        # Hack. Remove svg if it exists. If @model changes, the graph will be redrawn
        svg = d3.select viewport.0 .selectAll "svg"            
            .remove()
        # Select the svg element, if it exists.
        svg = d3.select viewport.0 .selectAll "svg"
            .data [cols]
        # ...Otherwise, create the skeletal chart.
        enterFrame = svg.enter()
            .append "svg" .append "g"
                .attr "class", "frame"
        
        # Update chart dimensions.
        svg .attr "width", width + margin.left + margin.right
            .attr "height", height + margin.top + margin.bottom
        
        frame = svg.select "g.frame"
            .attr "transform", "translate(#{margin.left},#{margin.top})"
            .attr "width", width
            .attr "height", height
        


        # x-axis.
        # TODO move axis to separate chart-type
        enterFrame.append "g"
            .attr "class", "x axis time"
        
        
        xAxis = d3.svg.axis().scale(xScale).orient("bottom").tickSize(6, 0)
        frame.select ".x.axis.time"
            .attr "transform", "translate(0,#{yScale.range()[0]})"
            .call xAxis
        

        metrics = frame.selectAll "metric"
            .data @model.dataset.metrics.models

        metrics.enter()
            .append("g")
                .attr "class", (d) -> 
                    "g metric line "+d.get 'label'
                .each (d) -> 
                    # console.log d
                    # metric defined charttype
                    chartElement = d.get "chartElement"
                    # otherwise the graph defined charttype
                    # FOR NOW take line as default
                    chartElement ?= 'd3-line' # @model.get "chartElement"                 
                    # create d3 chart element and render it
                    chEl = D3ChartElement.create chartElement                

                    chEl.renderChartElement d, frame ,xScale, yScale

        metrics.exit().remove()
        
        svg
    
    
