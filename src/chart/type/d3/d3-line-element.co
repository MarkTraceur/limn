d3 = require 'd3'
ColorBrewer = require 'colorbrewer'

{ _, op,
} = require '../../../util'
{ D3ChartElement    
} = require './d3-chart-element'

_fmt = require '../../../util/formatters'

root = do -> this

class exports.LineChartElement extends D3ChartElement
    __bind__ : <[ ]>
    SPEC_URL : '/schema/d3/d3-line.json'
    
    # NOTE: D3ChartElement.register() must come AFTER `typeName` declaration.
    chartElement : 'd3-line'
    D3ChartElement.register this            
    
    -> super ...

    renderChartElement: (metric, svgEl ,xScale, yScale) ->        
        
        X = (d, i) -> xScale d[0]
        Y = (d, i) -> yScale d[1]
        line = d3.svg.line().x(X).y(Y)

        ### Render the line path
        metricLine = root.metricLine = svgEl.append "g"
            .attr "class", "g metric line "+metric.get 'label'
                
        data = d3.zip metric.getDateColumn(), metric.getData()                

        metricLine.selectAll "path.line"
            .data d3.zip data.slice(0,-1), data.slice(1)
            .enter().append "path"
                .attr "d", line
                .attr "class", (d, i) -> "metric line segment #i"
                .style "stroke", metric.getColor 'color'

        
        ### Mouse Lens
        lens = root.lens = svgEl.selectAll "g.lens"
            .data [[]]
        gLens = lens.enter().append "g"
            .attr "class", "lens"
            .style "z-index", 1e9
        gInner = gLens.append "g"
            .attr "transform", "translate(1.5em,0)"
        gInner.append "circle"
            .attr "r", "1.5em"
            # .style "opacity", "0.4"
            # .style "fill", "white"
            .style "fill", "rgba(255, 255, 255, 0.4)"
            .style "stroke", "white"
            .style "stroke-width", "3px"
        gInner.append "text"
            .attr "y", "0.5em"
            .attr "text-anchor", "middle"
            .style "fill", "black"
            .style "font", "12px Helvetica"
            .style "font-weight", "bold"

        # event listeners        
        metricLine.selectAll ".line.segment"
            .on "mouseover", (d, i) ->
                
                {r,g,b} = color = d3.rgb metric.getColor 'color'                
                lineX = (X(d[0])+X(d[1]))/2
                lineY = (Y(d[0])+Y(d[1]))/2
                                

                lens = svgEl.select "g.lens"                
                    .attr "transform", "translate(#lineX, #lineY)"
                lens.select "circle" .style "fill", "rgba(#r, #g, #b, 0.4)"
                lens.select "text" .text -> _fmt.numberFormatter(d[0][1]).toString()

        svgEl        

    
# If instead of a line segment for each month we want to use one line segment per metric, we have to have a way of accessing the data associated with a given time step.

# lines.attr "d", line
#         .attr "class", (col, i) -> "metric line metric#i"
#         .style "stroke", (col, i) -> options.colors[i]
#         .each (col, i) ->
#             {width} = bbox = @getBBox()
#             # Add line-to-data position conversions
#             @indexAtX = d3.scale.quantize()
#                 .domain [0, width]
#                 .range d3.range col.length
#             @indexToPoint = (idx) ->
#                 @pathSegList.getItem idx

# lines.on "mouseover", (col, i) ->
#         line = root.line = this # DOM element of event
#         {r,g,b} = color = d3.rgb options.colors[i]
        
#         # quantize mouse x-location to get for closest data-point (index into data array)
#         [x,y] = root.pos = d3.mouse line
#         idx = root.idx = line.indexAtX x
#         {x:lineX, y:lineY} = root.pt = line.indexToPoint idx
        
#         lens = frame.select "g.lens"
#             .data d3.select(line).data()
#             .attr "transform", "translate(#lineX, #lineY)"
#         lens.select "circle" .style "fill", "rgba(#r, #g, #b, 0.4)"
#         lens.select "text" .text (col) -> col[idx][1]


