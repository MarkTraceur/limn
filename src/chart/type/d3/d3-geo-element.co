ColorBrewer = require 'colorbrewer'

{ _, op,
} = require '../../../util'
{ ChartType,
} = require '../chart-type'




class exports.GeoWorldChartType extends ChartType
    __bind__ : <[ dygNumberFormatter dygNumberFormatterHTML ]>
    SPEC_URL : '/schema/d3/d3-geo-world.json'
    
    # NOTE: ChartType.register() must come AFTER `typeName` declaration.
    typeName : 'd3-geo-world'
    ChartType.register this
    
    
    /**
     * Hash of role-names to the selector which, when applied to the view,
     * returns the correct element.
     * @type Object
     */
    roles :
        viewport : '.viewport'
        legend   : '.graph-legend'
    
    
    
    -> super ...
    
    
    transform: ->
        options = @model.getOptions() import @determineSize()
        # options.colors.palette = ["black", "red"] if options.colors.palette?
        options.colors.scaleDomain = d3.extent if options.colors.scaleDomain?
        options
    
    
    getProjection : (type) ->
        switch type
        case 'mercator' 'albers' 'albersUsa'
            d3.geo[type]()
        case 'azimuthalOrtho'
            d3.geo.azimuthal()
                .mode 'orthographic'
        case 'azimuthalStereo'
            d3.geo.azimuthal()
                .mode 'stereographic'
        default
            throw new Error "Invalid map projection type '#type'!"
    
    
    renderChart: (data, viewport, options, lastChart) ->
        {width, height} = options
        
        fill = @fill = (data, options) ->
            d3.scale[ options.colors.scale ]()
                .domain options.colors.scaleDomain
                .range options.colors.palette
        
        quantize = @quantize = (data, options) ->
            (d) ->
                if data[d.properties.name]?
                    return fill data[d.properties.name].editors
                else
                    # console.log 'Country '+d.properties.name+' not in data'
                    return fill "rgb(0,0,0)"
        
        projection = @projection = @getProjection(options.map.projection)
            .scale width
            .translate [width/2, height/2]
        
        path = d3.geo.path()
            .projection projection
        
        # path objects
        feature = map.selectAll ".feature"
        infobox = d3.select '.infobox'
        
        
        move = ->
            projection
                .translate d3.event.translate
                .scale d3.event.scale
            feature.attr "d", path
        
        zoom = d3.behavior.zoom()
            .translate projection.translate()
            .scale projection.scale()
            .scaleExtent [height,height*8]
            .on "zoom", move
        
        
        ####
        
        chart = d3.select viewport.0
            .append "svg:svg"
                .attr "width", width
                .attr "height", height
                .append "svg:g"
                    .attr "transform", "translate(0,0)"
                    .call zoom
        
        # rectangle
        map.append "svg:rect"
            .attr "class", "frame"
            .attr "width", width
            .attr "height", height
        
        
        ### infobox
        infobox.select '#ball'
            .append "svg:svg"
                .attr "width", "100%"
                .attr "height", "20px"
                .append "svg:rect"
                    .attr "width", "60%"
                    .attr "height", "20px"
                    .attr "fill", '#f40500'
        
        setInfoBox = (d) ->
            name = d.properties.name
            ae = 0
            e5 = 0
            e100 = 0
            
            if data[name]?
                ae   = parseInt data[name].editors
                e5   = parseInt data[name].editors5
                e100 = parseInt data[name].editors100
            
            infobox.select '#country' .text name
            infobox.select '#ae' .text ae
            infobox.select '#e5' .text e5+" ("+(100.0*e5/ae).toPrecision(3)+"%)"
            infobox.select '#e100' .text e100+" ("+(100.0*e100/ae).toPrecision(3)+"%)"
            
            xy = d3.svg.mouse this
            infobox.style "left", xy[0]+'px'
            infobox.style "top", xy[1]+'px'
            infobox.style "display", "block"
        
        
        worldmap = ->
            d3.json do
                "/data/geo/maps/world-countries.json"
                (json) ->
                    feature := feature
                        .data json.features
                        .enter().append "svg:path"
                            .attr "class", "feature"
                            .attr "d", path
                            .attr "fill", quantize
                            .attr "id", (d) -> d.properties.name
                            .on "mouseover", setInfoBox
                            .on "mouseout", -> infobox.style "display", "none"
        
        
        
    

data = null
main = ->
    jQuery.ajax do
        url : "/data/geo/data/en_geo_editors.json"
        dataType : 'json'
        success : (res) ->
            # result will be the returned JSON
            data := res
            
            # delete & hide spinner
            jQuery '.geo-spinner' .spin(false).hide()
            
            # load the world map
            worldmap()
            
            # adding bootstrap tooltips
            # $ '.page-header' .tooltip title:"for the header it works but is useless"
            # $ '.feature' .tooltip title:"here it doesn't work"
            
            console.log 'Loaded geo coding map!'
        error : (err) -> console.error err


