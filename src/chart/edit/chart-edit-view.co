d3 = require 'd3'
Seq = require 'seq'

{ _, op,
} = limn = require 'limn/client'
{ ChartView,
} = require '../element/chart-view'
{ ChartElementEditView,
} = require './chart-element-edit-view'
{ LineChartElementEditView,
} = require './line-chart-element-edit-view'


/**
 * @class
 * @extends BaseView
 */
ChartEditView = exports.ChartEditView = ChartView.extend do # {{{
    __bind__       : <[ createElementEditView ]>
    ctorName       : 'ChartEditView'
    tagName        : 'section'
    className      : 'chart chart-edit'
    template       : require '../../template/chart/chart-view'
    
    editRow : null
    editSubviewTypes : []
    
    
    constructor: function ChartEditView
        ChartView ...
    
    initialize: ->
        @editSubviewTypes = []
        ChartEditView.__super__.initialize ...
        _.each @elements, @createElementEditView, this
        
    
    
    build: ->
        ChartEditView.__super__.build ...
        @editRow = $ '<div class="chart-edit-row" />' .prependTo @$el
        this
    
    addSubview: (view) ->
        if view instanceof ChartElementEditView
            viewType = view.getClassName()
            @editSubviewTypes.push viewType unless _.contains @editSubviewTypes, viewType
            @editRow.attr 'data-subview', @editSubviewTypes.join(' ')
        ChartEditView.__super__.addSubview ...
    
    createElementEditView: (chartElement) ->
        model = chartElement.model
        if EditViewType = ChartElementEditView.lookup chartElement
            @addSubview new EditViewType { model, chartElement, @graph, @chart }
        _.each chartElement.elements, @createElementEditView, this
        void
    
    
# }}}


