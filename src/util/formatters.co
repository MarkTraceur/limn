moment = require 'moment'
_ = require './underscore'


_fmt = do
    
    /**
     * @param {String} pattern Date formatting pattern.
     * @returns {Function} Function that formats a date into the supplied pattern.
     */
    dateFormatterFor: (pattern) ->
        (d) -> moment(d).format(pattern)
    
    /**
     * Formats a date for display on an axis: `MM/YYYY`
     * @param {Date} d Date to format.
     * @returns {String}
     */
    axisDateFormatter: (d) ->
        moment(d).format 'MM/YYYY'
    
    /**
     * Formats a date for display in the legend: `DD MMM YYYY`
     * @param {Date} d Date to format.
     * @returns {String}
     */
    _dateFormatter: (d) ->
        moment(d).format 'DD MMM YYYY'
    
    /**
     * Formats a number for display, first dividing by the greatest suffix
     *  of {B = Billions, M = Millions, K = Thousands} that results in a
     *  absolute value greater than 0, and then rounding to `digits` using
     *  `result.toFixed(digits)`.
     * 
     * @param {Number} n Number to format.
     * @param {Number} [digits=2] Number of digits after the decimal to always display.
     * @param {Boolean} [abbrev=true] Expand number suffixes if false.
     * @returns {Object} Formatted number parts.
     */
    numberFormatter: (n, digits=2, abbrev=true) ->
        suffixes = do
            if abbrev
                [['B', 1000000000], ['M', 1000000], ['K', 1000], ['', NaN]]
            else
                [['Billion', 1000000000], ['Million', 1000000], ['', NaN]]
        
        for [suffix, d] of suffixes
            break if isNaN d
            if n >= d
                n = n / d
                break
        s = n.toFixed(digits)
        parts = s.split '.'
        whole = _.rchop parts[0], 3 .join ','
        fraction = '.' + parts.slice(1).join '.'
        { n, digits, whole, fraction, suffix, toString: -> 
            "#{@whole}#{@fraction}#{if abbrev then '' else ' '}#{@suffix}"
        }
    
    numberFormatterHTML: (n, digits=2) ->
        { whole, fraction, suffix } = _fmt.numberFormatter n, digits
        # coco will trim the whitespace
        "<span class='value'>
        <span class='whole'>#whole</span>
        <span class='fraction'>#fraction</span>
        <span class='suffix'>#suffix</span>
        </span>"
    
    


module.exports = exports =  _fmt
