ko = require 'knockout'
_  = require '../underscore'
require './observables'
require './add-extender'

makeObs = ko.utils.makeObservable


/**
 * Coerces input to this observable using the supplied function before it the
 * value is set, implying subscribers will only see the converted values. If the
 * underlying observable is a `ko.observableArray`, coercion will be applied to
 * each element before being added.
 * 
 * @param {ko.observable} obs Observable to decorate.
 * @param {Function} coerce Function invoked to coerce values before they are
 *  written to the underlying observable.
 * @param {Object} [owner=obs] Context for calls to coerce.
 * @returns {ko.dependentObservable} Wrapped observable.
 */
exports.typedExtender = ko.addExtender 'typed', (obs, coerce, owner=obs) ->
    unless typeof coerce is 'function'
        throw new Error "ko.typedObservable requires a coercion function! Got a #{typeof coerce} instead: #coerce"
    
    # current = obs() # peek?
    current = obs.peek()
    
    # Wrap observer with the coercion transform
    wrapper = ko.computed do
        read  : obs
        write : (value) ->
            if _.isArray value
                # don't map, or we lose object identity with the backing array
                _.each value, (val, i) ->
                    value[i] = coerce.call owner, val
            else
                value = coerce.call owner, value
            obs value
    
    if _.isArray current
        # Wrap additive `ko.observableArray` methods to transform new data
        _.each <[ push unshift splice replace ]>, (methodName) ->
            origMethod = obs[methodName]
            switch methodName
            case 'splice'
                obs.splice = (start, drop, ...args) ->
                    origMethod.apply this, [start, drop].concat _.map(args, coerce, owner)
            case 'replace'
                obs.replace = (oldItem, newItem) ->
                    origMethod.call this, oldItem, coerce.call(owner, newItem)
            default
                obs[methodName] = (arg) ->
                    origMethod.apply this, _.map(arguments, coerce, owner)
    
    # Copy over observable and observableArray methods
    _.defaults wrapper, obs
    
    # Update with starting value
    wrapper current
    
    # Replace with decorated property
    wrapper


/**
 * Convenience for wrapping a value in both an observable and the type coercion wrapper.
 * @returns {ko.dependentObservable}
 */
exports.typedObservable = ko.typedObservable = (coerce, val, owner) ->
    makeObs val .typed coerce, owner



/**
 * Coerces input to this observable using the supplied Model before it the
 * value is set, implying subscribers will only see the converted values. If the
 * underlying observable is a `ko.observableArray`, coercion will be applied to
 * each element before being added.
 * 
 * @param {ko.observable} obs Property to decorate.
 * @param {Class<Model>} ModelType Model to ensure.
 * @returns {ko.dependentObservable} Wrapped observable.
 */
exports.modelExtender = ko.addExtender 'model', (obs, ModelType) ->
    coerce = (value) ->
        return value if value instanceof ModelType
        # Do not wrap undefined or nulls
        return value unless value?
        new ModelType value
    
    obs.typed coerce


/**
 * Convenience for wrapping a value in both an observable and the model coercion wrapper.
 * @returns {ko.dependentObservable}
 */
exports.modelObservable = ko.modelObservable = (ModelType, val) ->
    makeObs val .model ModelType



/**
 * Coerces input to this observable using the supplied function before it the
 * value is set, implying subscribers will only see the converted values. If the
 * underlying observable is a `ko.observableArray`, coercion will be applied to
 * each element before being added.
 * 
 * @param {ko.observable} obs Property to decorate.
 * @param {Function|Class} coerce Function invoked to coerce incoming data into
 *  the appropriate type. If the function appears to be a class constructor, it will
 *  be wrapped to perform an instanceof check to prevent double-wrapping, and otherwise
 *  invoke the class with `new`.
 * @returns {ko.dependentObservable} Wrapped observable.
 */
exports.coerciveExtender = ko.addExtender 'coerce', (obs, coerce, owner) ->
    if _.isClass coerce
        obs.model coerce, owner
    else
        obs.typed coerce, owner


/**
 * Convenience for wrapping a value in both an observable and the "smart" coercion wrapper.
 * @returns {ko.dependentObservable}
 */
exports.coerciveObservable = ko.coerciveObservable = (coerce, val, owner) ->
    makeObs val .coerce coerce, owner


