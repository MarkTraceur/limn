page = require 'page'


limn = exports
limn.require = require

limn.{ _, op, emitters, guidFor, compareIds,
} =  { _, op, emitters, guidFor, compareIds, root,
} = limn.util = require './util'


# Decorate root limn namespace object with EventEmitter methods
emitter = limn.__emitter__ = new emitters.ReadyEmitter()
for k of <[ on addListener off removeListener emit trigger once removeAllListeners ]>
    limn[k] = emitter[k].bind emitter


limn.mount = (path='') ->
    mnt   = limn.config?.mount or '/'
    path .= slice(1)     if '/' == path[0]
    mnt  .= slice(0, -1) if '/' == mnt[mnt.length-1]
    "#mnt/#path"


limn.base       = require './base'
limn.data       = require './data'
limn.graph      = require './graph'
limn.dashboard  = require './dashboard'



/**
 * @class Sets up root application, automatically attaching to an existing element
 *  found at `appSelector` and delegating to the appropriate view.
 */
class limn.LimnApp
    VIEWS :
        'dashboards'    : limn.dashboard.DashboardView
        'graphs'        : limn.graph.GraphView
        '404'           : limn.base.NotFoundView
        'loading'       : limn.base.LoadingView
    
    
    /**
     * Current view.
     * @type ko.observable<View>
     */
    currentView : null
    
    
    
    /**
     * @constructor
     */
    (config) ->
        @currentView = ko.observable()
        
        # Because, really, everyone hates typing when debugging
        ko.computed ~>
            view  = limn.view  = @currentView()
            model = limn.model = view?.model?()
        
        @currentView new limn.base.LoadingView()
        ko.applyBindings this
        
        page '/:view/:id?/:action?', (context, next) ~>
            { view, id, action } = context.params
            
            # default to the reportcard dashboard
            unless view
                view = 'dashboards'
                id   = 'reportcard'
            
            if ViewType = @VIEWS[view]
                @currentView new ViewType id, action
            else
                next()
        
        page '*', ~>
            @currentView new @VIEWS['404']()
        
        page()
    
    
    
    /**
     * @static
     */
    @findConfig = ->
        # TODO: fill out inferred config
        config = root.limn_config or {}
        config.mount or= "/"
        config
    
    
    /**
     * @static
     */
    @main = function limnMain
        config = limn.config or= LimnApp.findConfig()
        limn.app or= new LimnApp config unless config.libOnly
        limn.emit 'main', limn.app
    




/**
 * DEBUG-ONLY!! BECAUSE DAVE IS LAZY AND HATES TYPING.
 * (It dumps all classes, functions, and constants into the global scope.)
 */
limn.expose = ->
    exposed = {}
    for name of <[ base data graph graph.node dashboard util _ op emitters ]>
        limnMod = _.getNested limn, name
        for k, v in limnMod
            continue unless _.isClass(v) or _.isFunction(v) or /^[A-Z_]+$/.test(k)
            window[k] = exposed[k] = v
    
    for mod of <[ moment seq timeseries events ]>
        window[mod] = exposed[mod] = require mod
    
    exposed



/**
 * Run main() on DOMReady
 */
root.jQuery? LimnApp.main
