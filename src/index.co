limn = exports

limn.{ _, op, emitters, generateId, guidFor, root, Mixin,
} =  { _, op, emitters, generateId, guidFor, root, Mixin,
} = limn.util = require './util'

# Decorate root limn namespace object with EventEmitter methods
emitter = limn.__emitter__ = new emitters.ReadyEmitter()
for k of <[ on addListener off removeListener emit trigger once removeAllListeners ]>
    limn[k] = emitter[k].bind emitter

limn.mount = (path='') ->
    mnt   = limn.config?.mount or '/'
    path .= slice(1)     if '/' == path[0]
    mnt  .= slice(0, -1) if '/' == mnt[mnt.length-1]
    "#mnt/#path"

limn.base       = require './base'
limn.data       = require './data'
limn.graph      = require './graph'
limn.dashboard  = require './dashboard'

page = require 'page'

/**
 * @class Sets up root application, automatically attaching to an existing element
 *  found at `appSelector` and delegating to the appropriate view.
 */
class limn.LimnApp # {{{
    views:
        'dashboards'    : limn.dashboard.DashboardView
        'graphs'        : limn.graph.GraphView
        '404'           : limn.base.NotFoundView
        'loading'       : limn.base.LoadingView
    
    /**
     * @constructor
     */
    (config) ->
        @currentView = ko.observable new limn.base.LoadingView()
        ko.applyBindings this
        
        page '/:view/:id?/:action?', (context, next) ~>
            view    = context.params.view
            id      = context.params.id
            action  = context.params.action
            
            # default to the reportcard dashboard
            unless view
                view = 'dashboards'
                id = 'reportcard'
            
            if ViewType = @views[view]
                @currentView new ViewType id, action
            else
                next()
        page '*', ~>
            @currentView new @views['404']()
        page()
# }}}


### Static Methods
LimnApp import do
    
    findConfig : ->
        # TODO: fill out inferred config
        config = root.limn_config or {}
        config.mount or= "/"
        config
    
    main : function limnMain
        config = limn.config or= LimnApp.findConfig()
        limn.app or= new LimnApp config unless config.libOnly
        limn.emit 'main', limn.app


root.jQuery? LimnApp.main
