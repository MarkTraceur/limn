_  = require 'underscore'
ko = require 'knockout'

{ Query,
} = require '../../util'
{ DataSource,
} = require '../datasource'
{ Metric,
} = require './metric'


class exports.TimeseriesMetric extends Metric
    -> super ...
    
    
    defaults : ->
        source_id  : null       # String
        source_col : null       # String|Number
        type       : 'int'      # String
        timespan : 
            start  : null       # String -> Date
            end    : null       # String -> Date
            step   : null       # String -> moment.Duration
    
    
    /**
     * The reified dataset (as (date, value) pairs) associated with this Metric.
     * @type ko.computed<[Date, Value]>
     * @depends source, query
     */
    data : @computed ->
        source_col = @get 'source_col'
        return unless source_col?
        return unless query = @query()
        return unless csv   = @source()?.data()
        query
            .rows true
            .columns 0, source_col
            .apply csv.getData()
    
    
    /**
     * Query object for the parameters of this Metric.
     * @type ko.computed<Query>
     * @depends source_col, timespan
     */
    query : @computed ->
        source_col = @get 'source_col'
        timespan   = @get 'timespan'
        return unless source_col? and timespan
        Query()
            .step       timespan.step()
            .timespan   timespan.start(), timespan.end()
    
    
    /**
     * The reified dates for the dataset associated with this Metric.
     * @type ko.computed<Array<Date>>
     * @depends source, query
     */
    dates : @computed ->
        return unless query = @query()
        return unless csv   = @source()?.data()
        query
            .rows false
            .columns 0
            .call csv.getDateColumn()
    
    
    /**
     * The reified dataset values associated with this Metric.
     * @type ko.computed<Array<Value>>
     * @depends source, query, source_col
     */
    values : @computed ->
        source_col = @get 'source_col'
        return unless source_col?
        return unless query = @query()
        return unless csv   = @source()?.data()
        query
            .rows false
            .columns source_col
            .apply csv.getData()
    
    
    /**
     * Find the entry with a date closest to the date specified
     * @param {Date} closestTo
     * @returns {numeric} the closest entry
     */
    findClosest : (closestTo) ->
        closest = null
        closestDateDifference = 9007199254740992
        for [date, value] of @data()
            dateDifference = Math.abs closestTo.getTime() - date.getTime()
            if dateDifference < closestDateDifference
                closestDateDifference = dateDifference
                closest = {date, value}
        closest
    
    

