_ = require 'underscore'

{ Model,
} = require '../../base'
{ ParsingMixin, Query,
} = require '../../util'
{ DataSource,
} = require '../datasource'


class exports.Metric extends Model
    ParsingMixin.mix this
    -> super ...
    
    
    defaults : ->
        source_id  : null # String
        source_col : null       # String|Number
        type       : 'int'      # String
    
    
    /**
     * Array of data-transformation functions.
     * @type ko.observableArray<Function>
     */
    transforms : ko.observableArray []
    
    
    /**
     * Data source of the Metric.
     * @type ko.computed<DataSource>
     * @depends source_id
     */
    source : @asyncComputed ->
        DataSource.lookup id if id = @get 'source_id'
    
    
    /**
     * Query object for the parameters of this Metric.
     * @type ko.computed<Query>
     * @depends source_col
     */
    query : @computed ->
        source_col = @get 'source_col'
        return unless source_col?
        Query()
            .columns source_col
    
    
    /**
     * The reified dataset (as (date, value) pairs) associated with this Metric.
     * @protected
     * @type ko.computed<{rows, columns}>
     * @depends source, query, transforms
     */
    materialized: @computed ->
        source_col = @get 'source_col'
        return unless source_col?
        return unless query = @query()
        return unless csv   = @source()?.data()
        {rows, columns} = query
            .materialize 'both'
            .transforms @transforms()
            .process csv.getData()
        
        {rows, columns}
    
    
    /**
     * The reified dataset (as (date, value) pairs) associated with this Metric.
     * @type ko.computed<[Date, Value]>
     * @depends materialized
     */
    data : @computed ->
        @materialized()?.rows
    
    
    /**
     * The reified dataset associated with this Metric.
     * @type ko.computed<ColumnDef>
     * @depends source, source_col
     */
    columnDef : @computed ->
        source_col = @get 'source_col'
        return unless source_col?
        @source()?.getColumnDef source_col
    
    
    /**
     * The reified dataset associated with this Metric.
     * @type ko.computed<String>
     * @depends columnDefinition
     */
    defaultLabel : @computed ->
        @columnDef()?.get 'label'
    
    
