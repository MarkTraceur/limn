_ = require 'underscore'
d3 = require 'd3'
{ Dataset,
} = require './dataset'


/**
 * @class
 * @extends Dataset
 */
class exports.SeriesDataset extends Dataset
    @registerType 'series'
    
    @parser = (d3Parser) ->
        (rawData) ->
            parsedData = d3Parser.parseRows rawData
            ignoreHeader = parsedData.slice(1)
            ignoreHeader.map ->
                it.map ->
                    tryParse = parseFloat it
                    tryParse = parseInt it if isNaN tryParse
                    tryParse = new Date it if isNaN tryParse
                    tryParse = it if tryParse == 'Invalid Date'
                    tryParse
    
    formatParsers:
        csv: @parser d3.csv
        tsv: @parser d3.tsv
    
    (source, rawData) ->
        super ...
        if _.isArray(@data) and _.isArray(@data[0])
            @columns = _.zip ...@data
    
    
    /**
     * @returns {Array<Array>} List of rows, each of which includes all columns.
     */
    getData: ->
        @data
    
    
    /**
     * @returns {Array<Array>} List of all columns (including ID column).
     */
    getColumns: ->
        @columns
    
    
    /**
     * @param {Number} idx Index of column.
     * @returns {Array} Column at `idx`.
     */
    getColumn: (idx) ->
        @columns[idx]
    
    
    /**
     * @returns {Array<String>} List of column labels.
     */
    getLabels: ->
        @labels
    
    


