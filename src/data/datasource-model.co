_  = require 'underscore'
op = require 'operator'
ko = require 'knockout'

{ Model,
} = require '../model'
{ StoredModel,
} = require '../stored-model'
{ ParserMixin,
} = require '../util/parser-mixin'




class exports.Column extends Model
    ParserMixin.mix this
    
    (attributes, @source) -> super ...
    
    defaults: ->
        id    : null
        label : ''
        type  : 'int'
        index : -1
    
    /**
     * Convert the string representation of a value from this Column to
     * its real type.
     * 
     * @param {String} value A serialized value.
     * @returns {*} The value parsed into the appropriate type.
     */
    parse: (value) ->
        @parseValue value, @get 'type'


class exports.DataSource extends StoredModel
    
    resource: '/data/datasources/'
    getId: -> @id()
    defaults: ->
        id            : null
        url           : ''
        format        : 'json'
        
        name          : ''
        shortName     : ''
        title         : ''
        subtitle      : ''
        desc          : ''
        notes         : ''
        
        timespan      : { start:null, end:null, step:'1mo' }
        
        /**
         * @type Column[]
         */
        columns       : []
    
    attributeTypes :
        columns : Column
    
    /**
     * The reified dataset associated with this DataSource.
     * @type ko.computed<DataSet>
     */
    data : null
    
    
    /**
     * @constructor
     */
    (attributes={}) ->
        attributes = @canonicalize attributes
        super attributes
        
        unless @id() in @__promiseCache__
            promise = @fetchEasy ->
            # TODO check performance with and without:
            promise.always ~> delete @__promiseCache__[@id()]
            @__promiseCache__[@id()] = promise
        @loading = @__promiseCache__[@id()]
        @loading.done (data) ~> @initialize.call this, data
        this
    
    /**
     * FIXME: hack because normal fetch isn't working
     */
    fetchEasy: (success) -> $.get @url(), success
    
    /**
     * shared among all instances of DataSource to prevent double-fetching of the same resource
     */
    __promiseCache__: {}
    
    /**
     * @param {string} data json from the server
     */
    initialize: (yaml) ->
        @data = yaml # TODO: obviously process this data
    
    /**
     * Enforces backwards compatibility at runtime by converting a DataSource from
     * one of many of the historical "formats" we've used to whatever the modern
     * format looks like.
     * 
     * @param {Object} data Raw DataSource attributes to canonicalize.
     * @returns {Object} Converted raw data.
     */
    canonicalize: (data) -> data
    
    
    
    


