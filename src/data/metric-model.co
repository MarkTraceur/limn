{ _, op,
} = require '../util'
{ BaseModel, BaseList,
} = require '../base'
ProjectColors = require './project-colors'
DataSource = DataSourceList = null





/**
 * @class
 */
Metric = exports.Metric = BaseModel.extend do # {{{
    NEW_METRIC_LABEL : 'New Metric'
    urlRoot  : '/metrics'
    
    /**
     * Data source of the Metric.
     * @type DataSource
     */
    source : null
    
    is_def_label : true
    
    defaults : ->
        source_id        : null
        source_col       : -1
        type             : 'int'
        timespan         : { start:null, end:null, step:null }
        
    
    
    
    constructor: function Metric
        BaseModel ...
    
    initialize : ->
        BaseModel::initialize ...
        @is_def_label = @isDefaultLabel()
        @on 'change:source_id',     @load,          this
        @on 'change:source_col',    @updateId,      this
        @on 'change:label',         @updateLabel,   this
        @load()
    
    
    # toJSON: ->
    #     json = Metric.__super__.toJSON ...
    #     json.color or= ProjectColors.lookup(json.label) or 'black'
    #     json
    
    
    getDateColumn: ->
        @source?.getDateColumn()
    
    getData: ->
        @source?.getColumn @get 'source_col'
    
    getLabel: ->
        @get('label') or @getPlaceholderLabel()
    
    getPlaceholderLabel: ->
        col  = @get 'source_col'
        name = "#{@source.get 'shortName'}, #{@source.getColumnName col}" if @source and col >= 0
        name or @NEW_METRIC_LABEL
    
    getSourceColumnName: ->
        col = @get 'source_col'
        @source.getColumnName col if @source and col > 0
    
    getColor: ->
        @get('color') or ProjectColors.lookup(@get('label')) or 'black'
    
    
    load: (opts={}) ->
        source_id  = @get 'source_id'
        @resetReady() if opts.force or @source?.id is not source_id
        return this if @loading or @ready
        
        unless source_id and @get('source_col') >= 0
            return @triggerReady()
        
        # console.log "#this.load()..."
        @updateId()
        @loading = true
        @wait()
        @trigger 'load', this
        
        DataSource.lookup source_id, (err, source) ~>
            # console.log "#this.onSourceReady", arguments
            @loading = false
            @unwait() # terminates the `load` wait
            if err
                console.error "#{this} Error loading DataSource! #err"
            else
                # console.log "#{this}.load() complete!"
                @source = source
                @is_def_label = @isDefaultLabel()
                @updateId()
                @triggerReady()
        this
    
    
    isDefaultLabel: ->
        label = @get 'label'
        not label or label is @getPlaceholderLabel() or label is @NEW_METRIC_LABEL
    
    updateLabel: ->
        return this unless @source
        label = @get 'label'
        if not label or @is_def_label
            @set 'label', ''
            @is_def_label = true
        else
            @is_def_label = @isDefaultLabel()
        this
    
    updateId: ->
        source_id  = @get 'source_id'
        source_col = @get 'source_col'
        if source_id and source_col?
            @id = "#source_id[#source_col]"
        @updateLabel()
        this
    
    
    /**
     * Check whether the metric has aiight-looking values so we don't
     * attempt to graph unconfigured crap.
     */
    isOk: ->
        @source?.ready # and _.every @get('timespan'), op.ok
    
# }}}


/**
 * @class
 */
MetricList = exports.MetricList = BaseList.extend do # {{{
    urlRoot  : '/metrics'
    model    : Metric
    
    constructor: function MetricList then BaseList ...
    initialize: -> BaseList::initialize ...
    
    comparator: (metric) ->
        metric.get('index') ? Infinity
    
    onlyOk: ->
        new MetricList @filter -> it.isOk()
    
# }}}

### FIXME: LOLHACKS ###
setTimeout do
    -> { DataSource, DataSourceList, } := require './datasource-model'
    10

