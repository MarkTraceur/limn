_ = require 'underscore'
ko = require 'knockout'

{ View,
} = require '../../base/view'
{ DataSource, ColumnDef,
} = require './datasource'
{ ParsingMixin,
} = require '../../util'
{ GraphView, Graph,
} = require '../../graph'
{ CanvasNodeData, CanvasSeriesNodeData, ViewportNodeData, GraphNodeData,
} = require '../../graph/node'


class exports.DataSourceView extends View
    template: 'datasources'
    
    defaults: ->
        model  : null
        action : null
        isDisposed : false
    
    # Apply Parser mixin
    ParsingMixin.mix this
    
    /**
     * @constructor
     * @param {DataSource} model DataSource model for this view.
     * @param {string} action the action this view was created to respond to
     */
    (model, action) ->
        super()
        
        @model = ko.observableArray()
        if model and model instanceof DataSource
            @model.push model
        else
            DataSource.fetchAll().done ~>
                @model(_.sortBy DataSource.getAllSources(), (d) -> d.name())
                @$('.datasourceSearch').typeahead({source: @model().map -> it.name()})
            @blankDataSource = ko.observable()
        
        @action action
        @message = ko.observable()
        @visualizeDialog = ko.observable()
        @filter = ko.observable()
        @filteredModel = ko.computed ~>
            if @filter()?.length
                filter = @filter().toLowerCase()
                @model().filter ~>
                    id = it.id().toLowerCase()
                    name = it.name().toLowerCase()
                    return id.indexOf(filter) >= 0 or
                         name.indexOf(filter) >= 0
            else
                @model()
    
    
    initializeAddForm: ->
        @blankDataSource new DataSource()
        saveButton = @$el.find 'button.save'
        enableButton = -> saveButton.attr 'disabled', false
        @blankDataSource().url.subscribe ~>
            return if it is null or it.indexOf('?') is 0
            @message "Attempting to analyze that Datafile"

            @blankDataSource().determineFormat()
            saveButton.attr 'disabled', true

        @blankDataSource().data.subscribe ~>
            return if @blankDataSource().url() is ''
            dataset = @blankDataSource().data()
            @blankDataSource().columns []
            try
                dataset.getLabels().map (label, i) ~>
                    type = @getTypeFromExample dataset.data[0][i]
                    newColumn = new ColumnDef {label, type}
                    if dataset.type is 'geojson'
                        newColumn.id label
                    @blankDataSource().columns.push newColumn
                @message "Metrics detected, please verify"
            catch
                @message "Failed to analyze metrics (check file format)"
        
        @blankDataSource().data()
    
    
    /**
     * Called by Knockout once the DataSource template has finished rendering.
     */
    afterRender: (element) ->
        # FIXME: this seems to get called every time a property of @blankDataSource changes, which is very bad
        # ^^ This might apply to the whole project
        return if @el()
        @el element
        
        if @action() is 'edit'
            new EditView this
        
        @initializeAddForm()
    
    
    addMetric: (link) -> @columns.push new ColumnDef {label:'', type:''}
    
    removeMetricFrom: (datasource) -> (link) -> datasource.columns.remove link
    
    newDataSource: (form) ->
        # refresh the indices of the columns to match the order they were entered
        for column, i of @blankDataSource().columns()
            column.index i
        
        ds = _.clone @blankDataSource()
        if ds.slug()
            ds.save(options={url:'/datasources'})
                .done ~>
                    ds.id ds.slug()
                    @model.insert ds, 0
                    @initializeAddForm()
                    @message "Saved"
                .fail (obj, msg, res) ~>
                    @message "Failed to Save: #{res.responseText}"
        else
            @message "Failed to Save: Invalid"
    
    
    /**
     * Invoked via Knockout in the context of a datasource
     * Dynamically creates a new GraphView and loads all the metrics from the datasource into it
     */
    visualize: ->
        @fetch().done ~>
            metricNodeType = do
                geojson: 'geo-feature'
                series: 'bar'
                timeseries: 'line'
            
            metricType = metricNodeType[@type()]
            
            columns = _.clone @columns()
            # filter out columns that aren't meant to be visualized
            switch @type()
                case 'timeseries'
                    columns = columns.slice(1)
                case 'geojson'
                    columns = columns.filter -> it.id() is not 'id' and it.id() is not 'name'
            
            switch @type()
                # TODO: make work for other maps besides map-world_countries
                case 'geojson'
                    worldMapChildren = columns.map ~>
                        nodeType: 'geo-feature'
                        metric:
                            source_id: @id()
                            source_col: it.id()
                        options:
                            label: it.label()
                            scale : 'log'
                            fill  : ['#D4E7ED', '#0A3A4B']
                        stroke :
                            width   : 3.0
                            color   : '#FFFFFF'
                            opacity : [0, 1.0]
                            
                    worldMapChildren.push {nodeType: 'zoom-pan'}
                    worldMapChildren.push {nodeType: 'infobox'}
                    
                    graph = do
                        name: "All Metrics in #{@name()}"
                        root:
                            nodeType: 'canvas'
                            width: 'auto'
                            height: 750
                            children: [
                                nodeType: 'geo-map'
                                metric:
                                    source_id: 'map-world_countries'
                                options:
                                    projection: 'mercator'
                                    backgroundColor: 'white'
                                    featuresColor: '#EEEEEE'
                                children: worldMapChildren
                            ]
                default
                    viewportNodeType = do
                        series: 'canvas-series'
                        timeseries: 'canvas'
                    nodeType = viewportNodeType[@type()]
                    graph = do
                        name: "All Metrics in #{@name()}"
                        root:
                            nodeType: nodeType
                            scaling: 'linear'
                            children: [
                                {nodeType: 'axis', options: {dimension: 'x', orient: 'bottom'}}
                                {nodeType: 'axis', options: {dimension: 'y', orient: 'left'}}
                                {nodeType: 'grid', options: {dimension: 'x'}}
                                {nodeType: 'grid', options: {dimension: 'y'}}
                                {nodeType: 'legend', options: {dateFormat: 'HH:mm on MMM DD, YYYY'}}
                                {nodeType: 'zoom-brush'}
                                {nodeType: 'smooth'}
                                {nodeType: "#{metricType}-group", children: columns.map ~> {
                                    nodeType: metricType
                                    metric: {
                                        source_id: @id()
                                        source_col: it.index()
                                        type: it.type()
                                    }
                                    options: {
                                        label: it.label()
                                    }
                                }}
                            ]
            
            limn.view.visualizeDialog new GraphView graph
            limn.view.$('> .visualizeDialog').modal()
            limn.view.visualizeDialog().resize()
