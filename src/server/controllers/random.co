fs         = require 'fs'
path       = require 'path'
exists     = fs.existsSync or path.existsSync

_          = require 'underscore'
Seq        = require 'seq'
yaml       = require 'js-yaml'

{ readJSONFilesAsync,
} = require '../files'

Controller = require '../controller'
FileBackedController = require '../file-controller'


/**
 * @class Resource controller for random requests.
 */
class RandomController extends FileBackedController
    name : 'random'
    -> super ...
    
    toFileSimple: (id) ->
        "#{@dataDir}/#id.json"
    
    # GET /random.:format?
    index: (req, res) ->
        # if format is json, then return the random JSON
        switch req.format
            case 'json' 
                Seq()
                    # find list of data/random/*.json files, send back the objects
                    .seq readJSONFilesAsync, "#{@dataDir}/**", Seq
                    # remove filepath info from the hash of random
                    .seq -> res.send _.values it
            default 
                res.render 'random/index'

    # GET /random/:random
    show: (req, res) ->
        if req.format is 'json'
            res.send req.random
        else
            res.render 'random/view'

    # GET /random/:random/edit
    edit: (req, res) ->
        if req.format is 'json'
            res.send req.random
        else
            res.render 'random/edit'
/* 
    # GET /graphs/new
    new: (req, res) ->
        res.render 'graph/edit'
    
    # POST /graphs
    create: (req, res) ->
        return unless data = @processBody req, res
        Seq()
            .seq @findFile, data.id, Seq
            .seq (file) ->
                res.send { result:"error", message:"Graph '#{data.id}' already exists!" }, 409 # 409: Resource Conflict
            .catch (err) ~>
                fs.writeFile @toFileSimple(data.id), JSON.stringify(data), "utf8", @errorHandler(res, "Error writing graph!")
    
    # PUT /graphs/:graph
    update: (req, res) ->
        return unless data = @processBody req, res
        if @PROTECT_GRAPHS and _ @PROTECTED_GRAPH_IDS .contains data.id
            return res.send {result:"error", message:"Graph '#{data.id}' is read-only."}, 403 # 403: Forbidden
        console.log "#this.update(#{data.id})"
        Seq()
            .seq_ (next) ~>
                @findFile data.id, (err, file) ~>
                    next.ok if err then @toFileSimple(data.id) else file
            .seq (file) ~>
                fs.writeFile file, JSON.stringify(data), "utf8", @errorHandler(res, "Error writing graph!")
*/

    
module.exports = exports = RandomController
