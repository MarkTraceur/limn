Seq = require 'seq'
moment = require 'moment'

_ = require '../util/underscore'
{ BaseView,
} = require '../base'
{ Graph,
} = require './graph-model'

root = do -> this
DEBOUNCE_RENDER = 100ms




/**
 * @class Base view for a Graph visualizations.
 */
GraphView = exports.GraphView = BaseView.extend do # {{{
    FILTER_CHART_OPTIONS : <[ 
        file labels visibility colors dateWindow ticker timingName xValueParser
        axisLabelFormatter xAxisLabelFormatter yAxisLabelFormatter
        valueFormatter xValueFormatter yValueFormatter
    ]>
    __bind__  : <[
        render stopAndRender resizeViewport checkWaiting
        onReady onSync onModelChange
    ]>
    __debounce__: <[ render ]>
    tagName   : 'section'
    
    /**
     * The chart type backing this graph.
     * @type ChartType
     */
    chartType : null
    
    
    
    constructor: function GraphView
        BaseView ...
    
    initialize : (o={}) ->
        @model or= new Graph
        @id = @graph_id = _.domize 'graph', (@model.id or @model.get('slug') or @model.cid)
        GraphView.__super__.initialize ...
        
        for name of @__debounce__
            @[name] = _.debounce @[name], DEBOUNCE_RENDER
        
        # Set up the spinner
        @on 'start-waiting', @onStartWaiting, this
        @on 'stop-waiting',  @onStopWaiting,  this
        @onStartWaiting() if @waitingOn # In case we missed the first call to @wait() somehow
        
        # Recolor callout on update
        @on 'update',        @onUpdate,       this
        
        ### Model Events
        @model
            .on 'start-waiting',    @wait,          this
            .on 'stop-waiting',     @unwait,        this
            .on 'sync',             @onSync,        this
            .on 'destroy',          @remove,        this
            .on 'change',           @render,        this
            .on 'change:dataset',   @onModelChange, this
            .on 'change:options',   @onModelChange, this
            .on 'error',            @onModelError,  this
        
        ### Chart Viewport
        @resizeViewport()
        
        # Resize chart on window resize
        # Note: can't debounce the method itself, as the debounce wrapper returns undefined
        $ root .on 'resize', _.debounce @resizeViewport, DEBOUNCE_RENDER
    
    
    loadData: ->
        @resizeViewport()
        @wait()
        Seq()
            .seq_ (next) ~>
                @model.once 'ready', next.ok .load()
            .seq_ (next) ~>
                @model.chartType.once 'ready', next.ok
            .seq_ (next) ~>
                @model.once 'data-ready', next.ok .loadData()
            .seq ~>
                @unwait()
                @onReady()
    
    onReady: ->
        return if @ready
        @triggerReady()
        @onSync()
    
    ### Persistence {{{
    
    /**
     * Reload the graph definition from the server.
     */
    load: ->
        console.log "#this.load!"
        @wait()
        @model.fetch { success:@unwait, error:@unwait }
        false
    
    /**
     * Save the graph definition to the server.
     */
    save: ->
        console.log "#this.save!"
        @wait()
        id = @model.get('slug') or @model.id
        @model.save {id}, { +wait, success:@unwait, error:@unwait }
        false
    
    /**
     * Flush all changes.
     */
    change: ->
        @model.change()
        this
    
    
    ### Rendering {{{
    
    chartOptions: (values, opts) ->
        # Handle @chartOptions(k, v, opts)
        if arguments.length > 1 and typeof values is 'string'
            [k, v, opts] = arguments
            values = { "#k": v }
        values or= {}
        
        options = @model.getOptions {-keepDefaults, +keepUnchanged}
        for k of @FILTER_CHART_OPTIONS
            # console.log "filter #k?", not options[k]
            if k in options and not options[k]
                delete options[k]
        options
    
    
    toTemplateLocals: ->
        attrs = _.extend {}, @model.attributes
        attrs.desc  = jade.filters.markdown that if attrs.desc
        attrs.notes = jade.filters.markdown that if attrs.notes
        delete attrs.options
        delete attrs.callout
        
        if callout = @model.getCalloutData()
            {year:yoy, month:mom} = callout
            attrs.callout = 
                latest : @model.chartType.numberFormatter(callout.latest, 2, false).toString()
                year :
                    dates : yoy.dates.map( -> moment(it).format('MMM YY') ).join(' &mdash; ')
                    value : ( 100 * yoy.value[2] / yoy.value[0] ).toFixed(2) + '%'
                    delta : yoy.value[2]
                month :
                    dates : mom.dates.map( -> moment(it).format('MMM YY') ).join(' &mdash; ')
                    value : ( 100 * mom.value[2] / mom.value[0] ).toFixed(2) + '%'
                    delta : mom.value[2]
        
        { @model, @graph_id, view:this, slug:'', name:'', desc:'', callout: {
            latest : '',
            year   : { dates:'', value:'' },
            month  : { dates:'', value:'' } }
        } import attrs
    
    
    /**
     * Resize the viewport to the model-specified bounds.
     */
    resizeViewport: ->
        @model.chartType?.withView(this).resizeViewport()
    
    
    /**
     * Redraw chart inside viewport.
     */
    renderChart: ->
        @chart = @model.chartType?.withView(this).render()
        this
    
    /**
     * Render the chart and other Graph-derived view components.
     */
    render: ->
        return this unless @ready
        @wait()
        @checkWaiting()
        GraphView.__super__.render ...
        @renderChart()
        @unwait()
        @checkWaiting()
        this
    
    
    ### }}}
    ### Event Handlers {{{
    
    onUpdate: (self, locals) ->
        co = locals.callout
        el = @$ '.callout'
        el.find '.metric-change .value' .removeClass 'delta-positive delta-negative'
        
        if co.year.delta > 0
            el.find ' .metric-change.year-over-year .value' .addClass 'delta-positive'
        else if co.year.delta < 0
            el.find ' .metric-change.year-over-year .value' .addClass 'delta-negative'
        
        if co.month.delta > 0
            el.find ' .metric-change.month-over-month .value' .addClass 'delta-positive'
        else if co.month.delta < 0
            el.find ' .metric-change.month-over-month .value' .addClass 'delta-negative'
        this
    
    onSync: ->
        return unless @ready
        console.info "#this.sync() --> success!"
        # TODO: UI alert
        @chartOptions @model.getOptions(), {+silent}
        @render()
    
    onStartWaiting: ->
        status = @checkWaiting()
        # console.log "#this.onStartWaiting!", status
    
    onStopWaiting: ->
        status = @checkWaiting()
        # console.log "#this.onStopWaiting!", status
    
    onModelError: ->
        console.error "#this.error!", arguments
        # TODO: UI alert
    
    onModelChange: ->
        changes = @model.changedAttributes()
        options = @model.getOptions()
        # console.log """
        #     Graph.changed( options ) ->
        #     \tchanges: #{JSON.stringify changes}
        #     \toptions: #{JSON.stringify options}
        #     \t^opts: #{JSON.stringify _.intersection _.keys(changes), _.keys(options)}
        # """
        # @chart?.updateOptions file:that if changes?.dataset
        @chartOptions options, {+silent} if changes?.options
    
    # Needed because (sigh) _.debounce returns undefined, and we need to preventDefault()
    stopAndRender : -> @render ... ; false
    
    
    ### }}}
    ### Spinner {{{
    
    /**
     * Retrieve or construct the spinner.
     */
    spinner: ->
        el = @$ '.graph-spinner'
        unless el.data 'spinner'
            ### Spin.js Options ###
            opts =
                lines     : 9           # [12]        The number of lines to draw
                length    : 2           # [7]         The length of each line
                width     : 1           # [5]         The line thickness
                radius    : 7           # [10]        The radius of the inner circle
                rotate    : -10.5       # [0]         rotation offset
                trail     : 50          # [100]       Afterglow percentage
                opacity   : 1/4         # [1/4]       Opacity of the lines
                shadow    : false       # [false]     Whether to render a shadow
                speed     : 1           # [1]         Spins per second
                zIndex    : 2e9         # [2e9]       zIndex; uses a very high z-index by default
                color     : '#000'      # ['#000']    Line color; '#rgb' or '#rrggbb'.
                top       : 'auto'      # ['auto']    Top position relative to parent in px; 'auto' = center vertically.
                left      : 'auto'      # ['auto']    Left position relative to parent in px; 'auto' = center horizontally.
                className : 'spinner'   # ['spinner'] CSS class to assign to the element
                fps       : 20          # [20]        Frames per second when falling back to `setTimeout()`.
                hwaccel   : Modernizr.csstransforms3d   # [false]     Whether to use hardware acceleration.
            
            isHidden = el.css('display') is 'none'
            el.show().spin opts
            el.hide() if isHidden
        el
    
    checkWaiting: ->
        spinner = @spinner()
        if isWaiting = (@waitingOn > 0)
            spinner.show()
            if spinner.find('.spinner').css('top') is '0px'
                # delete spinner
                spinner.spin(false)
                # re-add to DOM with correct parent sizing
                @spinner()
        else
            spinner.hide()
        isWaiting
    
    # }}}
    

