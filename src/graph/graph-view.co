_  = require 'underscore'
ko = require 'knockout'

{ View,
} = require '../base/view'
{ OrderedMap,
} = require '../util'
{ Graph,
} = require './graph-model'
{ GraphNode,
} = require './node/graph-node'
{ EditView,
} = require '../edit/edit-view'

Trait = require './node/graph-node-trait'



class exports.GraphView extends View
    template: 'graph'
    
    defaults: ->
        model  : null
        action : null
        isDestroyed : false
    
    /**
     * The `GraphNode` cache.
     * @protected
     * @type OrderedMap<GraphNodeData, GraphNode>
     */
    nodeCache : null
    
    /**
     * root to the tree of GraphNode(s)
     * @type GraphNode
     */
    rootNode : @eagerComputed ->
        return null unless graph = @model()
        @lookupNode graph.root()
    
    /**
     * DOM Element for this view. jQuery objects and d3 Selections
     * will be automatically stripped of their wrappers.
     * @type ko.observable<Element>
     */
    el : @eagerCoerciveObservable (el) ->
        @$el = null
        el = el[0]      if el instanceof jQuery
        el = el.node()  if el instanceof d3.selection
        return el       unless _.isElement el
        @$el = $ el
        el
    
    /**
     * jQuery-wrapped root element.
     * @type jQuery
     */
    $el : null
    
    
    /**
     * 
     */
    watchDOM: @computed ->
        return null unless el   = @el()
        return null unless node = @rootNode()
        return null unless nodeParentEl = @$('.graph-canvas-row > .inner').0
        node.build nodeParentEl
        nodeParentEl
    
    
    /**
     * Updates our wrappers for markdown fields when the model changes.
     */
    updateMarkdownFields: @eagerComputed ->
        return null unless model = @model()
        @descMarkdown  = model.desc.markdown()
        @notesMarkdown = model.notes.markdown()
        model
    
    
    
    /**
     * @constructor
     * @param {Graph} model Graph model for this view.
     * @param {string} action the action this view was created to respond to
     */
    (model, action) ->
        @nodeCache = new OrderedMap()
        super()
        @graphId = 'graph-' + @__id__
        
        if model instanceof Graph
            model.fetch()
        else if typeof model is 'string'
            model = Graph.load { id:model }
        else
            model = new Graph model
        
        @action action
        @model model
        
        @watch()
    
    
    /**
     * Inform sub-objects its safe to begin their watchers.
     */
    watchOthers : ->
        rootNode    = @rootNode().watch()
        rootBuilt   = @watchDOM()
        [ rootNode, rootBuilt ]
    
    
    /**
     * Looks up a `GraphNode` by an instance of `GraphNodeData`. On cache-miss,
     * creates a new GraphNode for the data and registers it with the cache.
     * 
     * @protected
     * @param {GraphNodeData} nodeData
     * @returns {GraphNode} The node corresponding to this data.
     */
    lookupNode: (nodeData) ->
        return null unless nodeData?
        return nodeData if nodeData instanceof GraphNode
        return that if @nodeCache.get nodeData
        
        node = GraphNode.fromNodeData this, nodeData
        @nodeCache.set nodeData, node
        
        # register for notification when the node is destroyed
        destroySub = node.isDestroyed.subscribe (isDestroyed) ~>
            throw new Error "WTF! node.isDestroyed false for #node!" unless isDestroyed
            currentNode = @nodeCache.get nodeData
            @nodeCache.remove nodeData if currentNode is node
            destroySub.dispose()
        
        # inform the node it can begin watching
        node.watch() if @isWatching
        
        node
    
    
    resize: ->
        @rootNode?.peek()?.resize()
    
    
    /**
     * Called by Knockout once the Graph template has finished rendering.
     */
    afterRender: (element) ->
        console.log "#this.afterRender()"
        @el element
        
        if @action() is 'edit'
            new EditView this
    
    
    
