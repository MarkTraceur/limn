_  = require 'underscore'
ko = require 'knockout'

{ View,
} = require '../base/view'
{ OrderedMap,
} = require '../util'
{ Graph,
} = require './graph-model'
{ GraphNodeData,
} = require './node/graph-node-data'
{ GraphNode,
} = require './node/graph-node'
{ EditView,
} = require '../edit/edit-view'



class exports.GraphView extends View
    template: 'graph'
    
    /**
     * The `GraphNode` cache.
     * @protected
     * @type OrderedMap<GraphNodeData, GraphNode>
     */
    nodeCache : null
    
    /**
     * root to the tree of GraphNode(s)
     * @type GraphNode
     */
    rootNode : @eagerComputed ->
        return null unless graph = @model()
        @lookupNode graph.root(), null
    
    defaults: ->
        model   : null
        element : null
        action  : null
    
    
    
    /**
     * @constructor
     * @param {Graph} model Graph model for this view.
     * @param {string} action the action this view was created to respond to
     */
    (model, action) ->
        @nodeCache = new OrderedMap()
        super()
        
        if model instanceof Graph
            model.fetch()
        else if typeof model is 'string'
            model = Graph.load { id:model }
        else
            model = new Graph model
        
        @model model
        @action action
    
    
    
    /**
     * Looks up a `GraphNode` by an instance of `GraphNodeData`. On cache-miss,
     * creates a new GraphNode for the data and registers it with the cache.
     * 
     * @protected
     * @param {GraphNodeData} nodeData
     * @param {GraphNode} [parent=null]
     * @returns {GraphNode} The node corresponding to this data.
     */
    lookupNode: (nodeData, parent=null) ->
        return that if @nodeCache.get nodeData
        
        node = GraphNode.fromNodeData nodeData, parent, this
        @nodeCache.set nodeData, node
        
        # register for notification when the node is destroyed
        subscription = node.isDestroyed.subscribe (isDestroyed) ~>
            currentNode = @nodeCache.get nodeData
            @nodeCache.remove nodeData if currentNode is node
            subscription.dispose()
        
        node
    
    
    /**
     * Called by Knockout once the Graph template has finished rendering.
     */
    afterRender: (element) ->
        @element element
        
        if @action() is 'edit'
            new EditView this
        
        rootElement = $(element).find('.graph-canvas')[0]
        
        @populate()
        # when populate is done, start by calling build on rootNode with rootElement
    
    
