{ View,
} = require '../base/view'
{ Graph,
} = require './graph-model'
{ GraphNodeData,
} = require './node/graph-node-data'
{ GraphNode,
} = require './node/graph-node'
{ EditView,
} = require '../edit/edit-view'

class exports.GraphView extends View
    template: 'graph'
    
    /**
     * root to the tree of GraphNode(s)
     * @type GraphNode
     */
    rootNode : @eagerComputed ->
        return null unless graph = @model()
        GraphNode.fromNodeData graph.root(), null, graph
    
    defaults: ->
        model : null
        element: null
        action: null
    
    
    /**
     * @constructor
     * @param {Graph} model Graph model for this view.
     * @param {string} action the action this view was created to respond to
     */
    (model, action) ->
        super()
        
        if model instanceof Graph
            model.fetch()
        else if typeof model is 'string'
            model = Graph.load { id:model }
        else
            model = new Graph model
        
        @model model
        @action action
    
    
    /**
     * Called by Knockout once the Graph template has finished rendering.
     */
    afterRender: (element) ->
        @element element
        
        if @action() is 'edit'
            new EditView this
        
        rootElement = $(element).find('.graph-canvas')[0]
        
        @populate()
        # when populate is done, start by calling build on rootNode with rootElement
    
    
    /**
     * Populate the GraphNode tree from the model's GraphNodeData objects.
     */
    populate: ->
        
