_  = require 'underscore'
d3 = require 'd3'
ko = require 'knockout'
op = require 'operator'

{ ViewportNodeData, ViewportNode,
} = require './viewport-node'

Trait = require './graph-node-trait'


toNumeric = -> +it

cmpNumeric = (a, b) ->
    op.cmp +a, +b

tuplesEqual = (a, b) ->
    cmpNumeric(a[0], b[0]) is 0 and
    cmpNumeric(a[1], b[1]) is 0





/**
 * @class
 * @extends ViewportNodeData
 */
class exports.CanvasNodeData extends ViewportNodeData
    @registerType 'canvas'
    
    defaults: ->
        width  : 'auto'
        height : 500
    
    attributeTypes: ->
        {}
    
    -> super ...



/**
 * @class
 * @extends ViewportNode
 */
class exports.CanvasNode extends ViewportNode
    @registerType 'canvas'
    traits   : [ Trait.VIEWPORT ]
    tagName  : 'section'
    template : 'canvas-node'
    
    
    /* * * *  Scales  * * * {{{ */
    
    /**
     * The scale that translates x domain values into x output range values
     * @type d3.time.scale
     */
    xScale : null
    
    
    /**
     * The scale that translates y domain values into y output range values
     */
    yScale : null
    
    
    /**
     * Observable for the contents of xScale and yScale, tracking their changes.
     * @type ko.observable<Object>
     */
    scales : ko.observable null
    
    
    /**
     * @returns {false|Object} The scales object if all are valid; false otherwise.
     */
    scalesIfValid: @computed ->
        scales = @scales()
        return scales if scales?.xValid and scales.yValid
        false
    
    
    /**
     * Recomputes the scale values.
     * @type Array<Metric>
     */
    metrics : @computed ->
        metrics = @walk [], (metrics, node) ->
            if      node.hasTrait(Trait.REQUIRES_METRIC) and
                    node.hasTrait(Trait.METRIC_TIMESERIES) and
                    not node.disabled() and
                    metric = node.model()?.metric()
                metrics.push metric
            metrics
        
        return unless metrics.length
        
        _scales  = @scales.peek()
        _xDomain = @xScale.domain()
        _yDomain = @yScale.domain()
        _width   = @xScale.range()[1]
        _height  = @yScale.range()[0]
        
        # Update each scale using metrics
        xs = _.compact _.flatten _.invoke metrics, 'dates'
        xDomain = d3.extent xs
        @xScale.domain xDomain if xs.length
        
        width = @viewportWidth()
        @xScale.range [0, width]
        
        xValid = xs.length and width > 0
        
        ys = _.compact _.flatten _.invoke metrics, 'values'
        yDomain = @applyPadding d3.extent ys
        @yScale.domain yDomain if ys.length
        
        height = @viewportHeight()
        @yScale.range [height, 0]
        
        yValid = ys.length and height > 0
        
        
        # If anything changed, trigger a notification by setting the scales computed
        unless  width  is _width  and tuplesEqual(xDomain, _xDomain) and
                height is _height and tuplesEqual(yDomain, _yDomain)
            @scales { @xScale, @yScale, @scaleShape, xValid, yValid }
        
        metrics
    
    
    /**
     * Changes the x and y domains of the graph and refreshes the this.scales observable
     * @param {Array} xDomain an array with length 2: [startX, stopX]
     * @param {Array} yDomain an array with length 2: [startY, stopY]
     */
    changeDomains: (xDomain, yDomain) ->
        _xDomain = @xScale.domain()
        xValid = xDomain?.length > 1 and xDomain[0]? and xDomain[1]?
        @xScale.domain(xDomain)
        
        _yDomain = @yScale.domain()
        yValid = yDomain?.length > 1 and yDomain[0]? and yDomain[1]?
        @yScale.domain(yDomain)
        
        # If anything changed, trigger a notification by setting the scales computed
        unless tuplesEqual(xDomain, _xDomain) and tuplesEqual(yDomain, _yDomain)
            @scales { @xScale, @yScale, @scaleShape, xValid, yValid }
        
        @scales.peek()
    
    
    isDataInView: ([date, val], i) ->
        [xMin, xMax] = @xScale.domain().map toNumeric
        return  xMin <= +date <= xMax
    
    
    /**
     * Percentage (expressed as a fraction) to expand the extrema of the y-scale.
     * @type Number
     */
    padding : 0.1
    
    
    applyPadding: ([min, max]) ->
        min -= min * @padding
        max += max * @padding
        [min, max]
    
    
    logDomains: ->
        xd = @xScale.domain().map -> if it instanceof Date then it.getTime() else it
        console.log 'xScale.domain:', xd, '--', 'yScale.domain:', @yScale.domain()
    
    
    
    # }}}
    
    
    /**
     * @constructor
     * @param {GraphView} graph
     * @param {ViewportNodeData} model
     */
    (graph, model) ->
        super ...
        
        @xScale = d3.time.scale().clamp(true)
        # ko.utils.observeFluentMethod @xScale, 'domain'
        
        @yScale = d3.scale.log()
        # ko.utils.observeFluentMethod @yScale, 'domain'
        
        @scaleShape = (shape) ~>
            switch shape
                case 'area'
                    d3.svg.area()
                        .x ([date, val], i) ~> @xScale date
                        .y1 ([date, val], i) ~> @yScale val
                        .y0 @yScale.range()[0]
                        .defined @isDataInView.bind this
                        .interpolate 'linear'
                default
                    d3.svg.line()
                        .x ([date, val], i) ~> @xScale date
                        .y ([date, val], i) ~> @yScale val
                        .defined @isDataInView.bind this
                        .interpolate 'linear'
        @scales { @xScale, @yScale, @scaleShape, -xValid, -yValid }
    
    
    watchDeps: ->
        @filterTraits Trait.REQUIRES_METRIC
            .forEach (node) -> node.model()?.get 'metric'
    
    
    /**
     * Hooks into the `@watching()` trigger.
     */
    watchOthers: ->
        @metrics()
    
    
    buildElement: (parentElement) ->
        @renderView parentElement
        @el el = $(parentElement).find('.canvas-node.graph-node').0
        @trackCursor()
        el
    
    
    determineDOMParentForChildNode: (node) ->
        # SVG nodes
        if node.hasTrait Trait.SVG
            if node.hasTrait Trait.FG_LAYER
                @$ 'svg > g > g.frame > g.fg' .0
            else if node.hasTrait Trait.BG_LAYER
                @$ 'svg > g > g.frame > g.content-frame > g.bg' .0
            else
                @$ 'svg > g > g.frame > g.content-frame > g.viewport' .0
        
        # HTML nodes
        else
            # XXX: Hack
            if node.hasTrait Trait.CALLOUT_NODE
                @graph.$ '.graph-name-row > section.callout' .0
            else if node.hasTrait Trait.SECTION
                @$el.parent().0
            else if node.hasTrait Trait.FG_LAYER
                @$ 'section.meta.fg' .0
            else
                @$ 'section.meta.bg' .0
    
    
    trackCursor: ->
        return if @cursor.peek() # only initialize once
        return unless el = @el.peek()
        return unless (svg = d3.select(el).select('svg'))?.length
        viewport = @sel.select 'g.viewport'
        
        svg.on 'mousemove', ~>
            [x, y] = d3.mouse(viewport[0][0])
            cur = @cursor.peek()
            if not cur?.hovering or cur.x != x or cur.y != y
                @cursor { +hovering, x, y }
        
        svg.on 'mouseout', ~>
            @cursor { -hovering }
        
        this
    
    
    background: (color) ->
        bg = @$ 'svg g.bg rect.bgcolor'
        if color
            bg.css 'fill', color
            this
        else
            bg.css 'fill'
    

