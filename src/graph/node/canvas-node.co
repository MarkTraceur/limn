_  = require 'underscore'
d3 = require 'd3'
ko = require 'knockout'
op = require 'operator'

{ ViewportNodeData, ViewportNode,
} = require './viewport-node'

Trait = require './graph-node-trait'


toNumeric = -> +it

cmpNumeric = (a, b) ->
    op.cmp +a, +b

tuplesEqual = (a, b) ->
    cmpNumeric(a[0], b[0]) is 0 and
    cmpNumeric(a[1], b[1]) is 0





/**
 * @class
 * @extends ViewportNodeData
 */
class exports.CanvasNodeData extends ViewportNodeData
    @registerType 'canvas'
    
    defaults: ->
        width    : 'auto'
        height   : 500
        
        # Override the data domain
        xDomain  : null
        yDomain  : null
        
        # Data domain padding, expressed as a fraction of the extents,
        # but overriden by {x,y}Domain
        xPadding : 0
        yPadding : 0.1
    
    attributeTypes: -> {}
    
    -> super ...



/**
 * @class
 * @extends ViewportNode
 */
class exports.CanvasNode extends ViewportNode
    @registerType 'canvas'
    traits   : [ Trait.VIEWPORT ]
    tagName  : 'section'
    template : 'canvas-node'
    
    
    -> super ...
    
    
    buildElement: (parentElement) ->
        @renderView parentElement
        @el el = $(parentElement).find('.canvas-node.graph-node').0
        @trackCursor()
        el
    
    
    background: (color) ->
        bg = @graph.$ 'svg g.bg rect.bgcolor'
        if color
            bg.css 'fill', color
            this
        else
            bg.css 'fill'
    

