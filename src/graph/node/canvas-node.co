_  = require 'underscore'
d3 = require 'd3'
ko = require 'knockout'
op = require 'operator'

{ ViewportNodeData, ViewportNode,
} = require './viewport-node'

Trait = require './graph-node-trait'


toNumeric = -> +it

cmpNumeric = (a, b) ->
    op.cmp +a, +b

tuplesEqual = (a, b) ->
    cmpNumeric(a[0], b[0]) is 0 and
    cmpNumeric(a[1], b[1]) is 0





/**
 * @class
 * @extends ViewportNodeData
 */
class exports.CanvasNodeData extends ViewportNodeData
    @registerType 'canvas'
    
    defaults: ->
        width    : 'auto'
        height   : 500
        
        # Override the data domain
        xDomain  : null
        yDomain  : null
        
        # Data domain padding, expressed as a fraction of the extents,
        # but overriden by {x,y}Domain
        xPadding : 0
        yPadding : 0.1
    
    attributeTypes: -> {}
    
    -> super ...



/**
 * @class
 * @extends ViewportNode
 */
class exports.CanvasNode extends ViewportNode
    @registerType 'canvas'
    traits   : [ Trait.VIEWPORT ]
    tagName  : 'section'
    template : 'canvas-node'
    
    
    -> super ...
    
    
    buildElement: (parentElement) ->
        @renderView parentElement
        @el el = $(parentElement).find('.canvas-node.graph-node').0
        @trackCursor()
        el
    
    
    /**
     * Element representing the frame where the content is held.
     * @type ko.observable<d3.selection>
     */
    contentFrameEl: @computed ->
        d3.select @$('.content-frame').0 if @el()
    
    
    /**
     * Determine the DOM node to act as the parent for a direct child of the root node.
     * 
     * @protected
     * @param {GraphNode} node
     * @returns {Element}
     */
    determineDOMParentForChildNode: (node) ->
        # SVG nodes
        if node.hasTrait Trait.SVG
            if node.hasTrait Trait.FG_LAYER
                @$ 'svg .frame > .fg' .0
            else if node.hasTrait Trait.BG_LAYER
                @$ 'svg .content-frame > .bg' .0
            else
                @$ 'svg .content-frame > .viewport' .0
        
        # HTML nodes
        else
            # XXX: Hack
            if node.hasTrait Trait.CALLOUT_NODE
                @graph.$ '.graph-name-row > .callout' .0
            else if node.hasTrait Trait.SECTION
                @$el.parent().0
            else if node.hasTrait Trait.FG_LAYER
                @$ '.meta.fg' .0
            else
                @$ '.meta.bg' .0
    
    
    background: (color) ->
        return unless (bg = @$ '.content-frame > .bg > .bgcolor').length
        if arguments.length
            bg.css 'fill', color
            this
        else
            bg.css 'fill'
    
    

