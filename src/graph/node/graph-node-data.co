_  = require 'underscore'
ko = require 'knockout'

{ Model,
} = require '../../base'
{ TypeCache,
} = require '../../util'
{ Metric,
} = require '../../data/metric'
{ NodeMixin,
} = require './node-mixin'



/**
 * Map of known GraphNodeData sub-types, keyed by type-name.
 * @type TypeCache<GraphNodeData>
 */
NODE_DATA_TYPES = exports.NODE_DATA_TYPES = new TypeCache 'nodeType'


/**
 * @class Model for GraphNodes.
 * @extends Model
 * @mixes NodeMixin
 */
class exports.GraphNodeData extends Model
    NodeMixin.mix this
    
    
    nodeType : 'node'
    
    defaults: ->
        nodeType : @nodeType
        disabled : false
        label    : null
        metric   : null
        options  : {}
        children : []
    
    attributeTypes: ->
        metric   : Metric
        children : GraphNodeData.create
        # options  :
        #     stroke : Stroke
    
    
    /**
     * Parent of this node.
     * @type ko.observable<GraphNodeData>
     */
    parent : @eagerCoerciveObservable GraphNodeData
    
    
    /**
     * Ensure children Arrays are properly updated when parent changes.
     * 
     * Note: Knockout ignores cycles in deps, so the circular modification
     * trigger between `parent` and `children` is benign.
     */
    watchParent : @computed ->
        oldParent = @parent.prev()
        oldParent?.children.remove this
        newParent = @parent()
        newParent?.children.push this unless _.contains newParent?.children.peek(), this
        newParent
    
    
    /**
     * Ensure parents are properly set when child-nodes are added or removed.
     * 
     * Note: Knockout ignores cycles in deps, so the circular modification
     * trigger between `parent` and `children` is benign.
     */
    watchChildren : @computed ->
        oldChildren = @children.prev()
        newChildren = @children()
        
        # Unparent children being removed (not in the new set)
        _.each oldChildren, (child) ~>
            child.parent(null) if child.parent.peek() is this and not _.contains newChildren, child
        
        # Set the parent of objects that are children
        _.invoke newChildren, 'parent', this
        
        newChildren
    
    
    
    /**
     * @constructor
     */
    (attributes={}) ->
        super()
        @initMixin() # Notify NodeMixin to initialize this instance.
        
        # Set initial attributes now that we've wrapped observers.
        # Caller still needs to call `.watching()` once we return so we can begin
        # observing updates without causing a loop.
        @set attributes
    
    
    
    
    /**
     * Starts watching relevant properties and informs sub-objects its safe to
     * begin their watchers.
     * 
     * Note that this function **must** be invoked by the object creator once
     * construction is finished. It cannot be called automatically by the
     * constructor without causing a loop, potentially triggering updates
     * before anyone else can get a reference to the object.
     * 
     * This method must be idempotent; it should always be safe to call
     * it multiple times. (Using a `@computed` ensures this.)
     * @protected
     */
    watching: @computed ->
        # console.log "#this.watching!"
        @isWatching = true
        
        # Create dependencies
        @children()
        # @parent()
        @watchDeps()
        
        # ...But ignores whatever other watchers do
        ko.dependencyDetection.ignore ~>
            _parent      = @watchParent()
            _children    = @watchChildren()
            _others      = @watchOthers()
            
            # Recursively activate watching() on children
            _.invoke @children(), 'watching'
            
            [ _parent, _children, _others ]
    
    
    /**
     * Stub to allow you to hook into @watching() without overriding everything.
     * Called to generate dependencies prior to `watching` recursion.
     * 
     * @abstract
     * @protected
     */
    watchDeps: ->
    
    
    /**
     * Stub to allow you to hook into @watching() without overriding everything.
     * Called to recursively notify of deps.
     * 
     * @abstract
     * @protected
     */
    watchOthers: ->
    
    
    /* * * *  Property Cascading  * * * {{{ */
    
    # TODO
    
    
    # }}}
    
    
    toString: ->
        id        = @__id__
        Class     = @constructor
        className = Class.displayName or Class.name
        nChildren = @children.peek().length
        "#className(id=#id, \#children=#nChildren)"
    
    
    
    /* * * *  Class Methods  * * * {{{ */
    
    
    /**
     * @static
     * @param {Object} attributes Starting attribute values, requiring
     *  a `nodeType` to be present.
     * @returns {? extends GraphNodeData} A new instance of the appropriate
     *  GraphNodeData type.
     */
    @create = (attributes) ->
        return null unless attributes
        unless nodeType = attributes?.nodeType
            throw new Error "Cannot create GraphNodeData without a nodeType!"
        GraphNodeDataType = GraphNodeData.lookupType nodeType
        new GraphNodeDataType attributes
    
    
    /**
     * Register a new node type. Subclasses should only call this
     * method *after* setting their `nodeType`:
     * 
     *  class AnotherGraphNode extends GraphNode
     *      @registerType('another')
     *      -> super ...
     * 
     * @static
     * @see TypeCache#add
     */
    @registerType = (nodeType, Subclass=this) ->
        # console.log "GraphNode.registerType(#Subclass)"
        NODE_DATA_TYPES.add nodeType, Subclass
    
    
    /**
     * Look up a `GraphNode` by `nodeType`.
     * @static
     * @see TypeCache#lookup
     */
    @lookupType = (nodeType) ->
        NODE_DATA_TYPES.lookup nodeType
    
    
    # }}}
    


