_  = require 'underscore'
ko = require 'knockout'
d3 = require 'd3'

{ GraphNodeData,
} = require '../graph-node-data'
{ GraphNode,
} = require '../graph-node'

Trait = require '../graph-node-trait'



/**
 * @class
 * @extends GraphNodeData
 */
class exports.ZoomPanNodeData extends GraphNodeData
    @registerType 'zoom-pan'
    
    defaults: ->
        options :
            min : 1
            max : 10
    
    attributeTypes: ->
        {}
    
    -> super ...



/**
 * @class
 * @extends GraphNode
 */
class exports.ZoomPanNode extends GraphNode
    @registerType 'zoom-pan'
    traits : [
        Trait.VIS_NODE
        Trait.SVG
        Trait.LEAF
    ]
    
    
    -> super ...
    
    
    render: ->
        return unless root = @root()
        return unless scales = root.scalesIfValid()
        
        self = this
        @behavior ?= d3.behavior.zoom()
            .x scales.xScale
            .y scales.yScale
            .scaleExtent [1,10]
            .on 'zoom', -> self.zooming.call this, self
        
        d3.select(@root().el()).select('g.content-frame').call @behavior
    
    
    zooming: (self) ->
        scale = d3.event.scale
        # FIXME: this still isn't zooming or clipping quite right - the scales are consistent on zoomin/zoomout but they're off by maybe the offset?
        frame = d3.select this
        
        # special case, if they zoom all the way out, bring them back to normal
        if scale is 1
            self.behavior.translate([0,0])
            self.behavior.scale(scale)
            frame = frame.transition(100)
        
        frame.attr do
            transform: "translate(#{self.behavior.translate()}) scale(#{self.behavior.scale()})"
        
        self.root().zooming self.behavior.translate(), self.behavior.scale()
