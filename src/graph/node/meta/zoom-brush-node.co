_  = require 'underscore'
ko = require 'knockout'
d3 = require 'd3'
moment = require 'moment'

{ GraphNodeData,
} = require '../graph-node-data'
{ GraphNode,
} = require '../graph-node'

Trait = require '../graph-node-trait'



/**
 * @class
 * @extends GraphNodeData
 */
class exports.ZoomBrushNodeData extends GraphNodeData
    @registerType 'zoom-brush'
    
    defaults: ->
        options :
            allowX : true
            allowY : true
    
    attributeTypes: ->
        {}
    
    -> super ...



/**
 * @class
 * @extends GraphNode
 */
class exports.ZoomBrushNode extends GraphNode
    @registerType 'zoom-brush'
    traits : [
        Trait.VIS_NODE
        Trait.SVG
        Trait.LEAF
        Trait.FG_LAYER
    ]
    
    
    -> super ...
    
    
    render: ->
        return unless root = @root()
        return unless scales = root.scalesIfValid()
        
        return if @brush
        
        @brush = d3.svg.brush()
            .x scales.xScale
            .y scales.yScale
            .on 'brushend', ~>
                @originalXDomain ?= @root().xScale.domain()
                @originalYDomain ?= @root().yScale.domain()
                @zooming.call this
        
        @sel.call @brush
        @sel.select 'rect.background'
            .attr 'pointer-events', 'all'
            .on 'dblclick', ~>
                @hideTrackingCircles() # TODO: LineNode should listen for zoom event
                @root().changeDomains @originalXDomain, @originalYDomain
                window.getSelection?().removeAllRanges()
                document.selection?.empty()
    
    
    zooming: ->
        extent = d3.event.target.extent()
        if @extentIsSignificant extent
            @root().changeDomains [extent[0][0], extent[1][0]], [extent[0][1], extent[1][1]]
        @brush.clear()
        @sel.call @brush
        @hideTrackingCircles()
    
    hideTrackingCircles: ->
        @root().sel.selectAll 'circle.tracking'
            .attr do
                cx: -10
                cy: -10
    
    extentIsSignificant: (extent) ->
        significanceThreshold = 1000 # one second
        extent[1][0] - extent[0][0] > significanceThreshold
    
