_  = require 'underscore'
ko = require 'knockout'
d3 = require 'd3'

{ GraphNode,
} = require '../graph-node'

Trait = require '../graph-node-trait'



/**
 * @class
 * @extends GraphNode
 */
class exports.AxisNode extends GraphNode
    nodeType : 'axis'
    traits   : [
        Trait.META_NODE
        Trait.FG_LAYER
        Trait.SVG
        Trait.LEAF
    ]
    @registerType()
    
    
    -> super ...
    
    
    render: ->
        options = @model().options()
        return unless scales    = @root().scalesIfValid()
        return unless dimension = options.get('dimension')
        return unless scale     = scales[ dimension+'Scale' ]
        
        orient = options.get('orient')
        ticks  = options.get('ticks')
        axis   = d3.svg.axis().scale scale
        
        switch dimension
        case 'x'
            axis.ticks(d3.time.months, ticks or 4)
                .tickFormat @dateFormatterFor 'MMM YY'
                .orient(orient or= 'bottom')
        case 'y'
            axis.ticks(ticks or 5)
                .tickFormat @numberFormatterFor 2
                .orient(orient or= 'left')
        
        @sel.classed dimension+'-axis axis', true
        @sel.call axis
        @moveAxis()
        
        axis
    
    
    moveAxis: @computed ->
        return unless el = @el() and @sel
        @sel.attr 'transform', ''
        
        # TODO: handle other orientations
        return unless @model()?.options()?.get('dimension') is 'x'
        height = @root().viewportHeight()
        @sel.attr 'transform', "translate(0, #height)"
        height
    

