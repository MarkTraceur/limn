_  = require 'underscore'
ko = require 'knockout'
d3 = require 'd3'

{ TimeseriesNode,
} = require './timeseries-node'

Trait = require '../graph-node-trait'
ProjectColors = require '../project-colors'



/**
 * @class
 * @extends TimeseriesNode
 */
class exports.LineNode extends TimeseriesNode
    nodeType : 'line'
    traits   : [
        Trait.VIS_NODE
        Trait.REQUIRES_METRIC
        Trait.METRIC_TIMESERIES
        Trait.SVG
        Trait.LEAF
    ]
    @registerType()
    
    
    -> super ...
    
    
    /**
     * Update selection representing the SVG path element for the line.
     * @type ko.computed<d3.selection.update>
     */
    render: ->
        data = if @timeseriesData() then [that] else []
        
        # create selection
        line = @selectAll 'path.metric-line' .data data
        
        # always exit() to remove existing nodes if data has changed and become invalid
        line.exit().remove()
        
        return line unless data.length
        return null unless model  = @model()
        return null unless scales = @root().scales()
        
        label   = model.get('label') or model.metric()?.defaultLabel() or '(no label)'
        options = model.options()
        color   = options?.get('color') or ProjectColors.lookup(label) or 'black'
        stroke  = options?.get('stroke') or 5
        
        line.enter()
            .append 'path'
                .classed 'metric-line', true
                .attr  'vector-effect', 'non-scaling-stroke'
                .style 'fill',          'none'
                .style 'stroke-width',  stroke
                .style 'stroke',        color
        line.transition()
            .attr 'd', scales.scaleLine
        line
    
    
    # TODO: Options:
    # - color with palette lookup on line-group
    # - opacity
    # - stroke-width
    # - label with default == metric.defaultLabel
    # - valueFormat, dateFormat
    

