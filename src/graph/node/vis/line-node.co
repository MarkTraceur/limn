_  = require 'underscore'
ko = require 'knockout'
d3 = require 'd3'

{ TimeseriesNode,
} = require './timeseries-node'


/**
 * @class
 * @extends TimeseriesNode
 */
class exports.LineNode extends TimeseriesNode
    nodeType : 'line'
    @registerType()
    
    -> super ...
    
    
    onLayoutChart: ->
        # console.log "#this.onLayoutChart!"
        # report as a metric to the chart
        options = @model.getOptions()
        dateCol = @model.getDateColumn()
        data = @model.getData()
        label = "#{options.label}"
        if label.length is 0
            label = "#{@model.cid} (change)"
        index = @chart.addMetric label, dateCol, data
        color = @chart.colorScale label
        
        # metric marker
        # TODO: make into an option
        @chart.defs.select 'g.metricDefs' .append 'marker'
            .attr 'id', (d, i) -> "metricPathDot#{index}"
            .attr 'markerUnits', 'userSpaceOnUse'
            .attr 'markerWidth', 14
            .attr 'markerHeight', 14
            .attr 'refX', 7
            .attr 'refY', 7
            .append 'circle'
                .attr 'r', 6
                .attr 'cx', 7
                .attr 'cy', 7
                .attr 'fill', color
                .attr 'stroke', color
        
        # metric lines
        @sel.selectAll 'path.metricLine'
            .data [data]
            .enter().append 'path'
                .attr 'd', @chart.lineGenerator
                .classed 'metricLine', true
                .attr 'data-metricIndex', index
                .style 'stroke', color
                .attr 'vector-effect', 'non-scaling-stroke'
                .attr 'marker-start', (d, i) -> "url(\#metricPathDot#{index})"
                .attr 'marker-mid', (d, i) -> "url(\#metricPathDot#{index})"
                .attr 'marker-end', (d, i) -> "url(\#metricPathDot#{index})"
    
    /**
     * Responds to all data changes, as the scale might have changed when the dataset did.
     * (Auto-registered by ChartElement.)
     */
    onDataChange: ->
        # console.log "#this.onDataChange!"
        # Set data with new value before recalculating line's value to force an update.
        @sel.selectAll 'path.metricLine'
            .data [@model.getData()]
            .transition()
            .attr 'd', @chart.lineGenerator



