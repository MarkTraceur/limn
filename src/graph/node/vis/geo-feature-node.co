_  = require 'underscore'
ko = require 'knockout'
d3 = require 'd3'

{ GraphNodeData,
} = require '../graph-node-data'
{ GraphNode,
} = require '../graph-node'
{ GeoFeatureMetric,
} = require '../../../data/metric'

Trait = require '../graph-node-trait'
ProjectColors = require '../../project-colors'



/**
 * @class
 * @extends GraphNodeData
 */
class exports.GeoFeatureNodeData extends GraphNodeData
    @registerType 'geo-feature'
    
    /**
     * A GeoFeatureNode binds data to presentation options, like `fill` or
     * `stroke`, on each feature in the dataset. Option values should be an
     * Array, interpreted as the range for a scale used to transform the data
     * before setting the style property. The scale type can be controlled with
     * the `scale` option. If an option value is not an array, it is simply
     * set on every feature node.
     * 
     * Valid Bindable Options:
     *  - fill
     *  - fillOpacity
     *  - stroke
     *      - width
     *      - color
     *      - opacity
     * 
     */
    defaults: ->
        options:
            scale       : 'linear'
            valueFormat : ',.2s'
    
    attributeTypes: ->
        metric: GeoFeatureMetric
    
    -> super ...



/**
 * @class
 * @extends GraphNode
 */
class exports.GeoFeatureNode extends GraphNode
    @registerType 'geo-feature'
    traits : [
        Trait.VIS_NODE
        Trait.REQUIRES_METRIC
        Trait.METRIC_CONTENT_DATA
        Trait.METRIC_GEO_FEATURE
        Trait.SVG
        Trait.LEAF
    ]
    
    
    -> super ...
    
    
    render: ->
        featureData = @model().metric().data()
        features    = @parent().features()
        # return unless @parent().el() and parentSel = @parent().sel
        return unless featureData and features?[0]?.length
        
        dataById  = _.generate featureData
        extent    = d3.extent _.pluck(featureData, 1)
        extent[0] = Math.max 1, extent[0]
        
        options   = @options()
        scaleType = options.get 'scale'
        throw Error "Unknown scale type '#scaleType'!" unless d3.scale[scaleType]
        
        <[ fill fillOpacity stroke.width stroke.color stroke.opacity ]>.forEach (opt) ~>
            return unless (val = options.get opt)?
            
            style = _.str.dasherize opt.replace /\./g, '-'
            style = 'stroke' if style is 'stroke-color'
            
            if not _.isArray val
                features.style style, val
            else
                return unless val.length > 1
                optScale = d3.scale[scaleType]()
                    .domain extent
                    .range  val
                features.style style, (d) -> optScale dataById[d.id]
    
