_  = require 'underscore'
ko = require 'knockout'
d3 = require 'd3'

{ GraphNodeData,
} = require '../graph-node-data'
{ GraphNode,
} = require '../graph-node'
{ GeoFeatureMetric,
} = require '../../../data/metric'

Trait = require '../graph-node-trait'
ProjectColors = require '../../project-colors'



/**
 * @class
 * @extends GraphNodeData
 */
class exports.GeoFeatureNodeData extends GraphNodeData
    @registerType 'geo-feature'
    
    defaults: ->
        options:
            valueFormat : ',.2s'
    
    attributeTypes: ->
        metric: GeoFeatureMetric
    
    -> super ...



/**
 * @class
 * @extends GraphNode
 */
class exports.GeoFeatureNode extends GraphNode
    @registerType 'geo-feature'
    traits : [
        Trait.VIS_NODE
        Trait.REQUIRES_METRIC
        Trait.METRIC_CONTENT_DATA
        Trait.METRIC_GEO_FEATURE
        Trait.SVG
        Trait.LEAF
    ]
    
    
    -> super ...
    
    
    render: ->
        return unless featureData = @model().metric().data()
        # return unless @parent().el() and parentSel = @parent().sel
        return unless (features = @parent().features())?[0]?.length
        
        dataById = _.generate featureData
        fillColors = @options().get('fill')
        
        if _.isArray(fillColors)
            extent = d3.extent _.pluck(featureData, 1)
            extent[0] = Math.max 1, extent[0]
            fill = d3.scale.log()
               .domain extent
               .range fillColors
            features.style 'fill', (d) -> fill dataById[d.id]
        
    
    
