_  = require 'underscore'
d3 = require 'd3'
ko = require 'knockout'
op = require 'operator'

{ GraphNodeData,
} = require './graph-node-data'
{ GraphNode,
} = require './graph-node'

Trait = require './graph-node-trait'




/**
 * @class
 * @extends GraphNodeData
 */
class exports.ViewportNodeData extends GraphNodeData
    @registerType 'viewport'
    
    defaults: ->
        width     : 'auto'
        minWidth  : 750
        maxWidth  : null
        
        height    : 500
        minHeight : 500
        maxHeight : null
    
    attributeTypes: ->
        {}
    
    -> super ...



/**
 * @class
 * @extends GraphNode
 */
class exports.ViewportNode extends GraphNode
    @registerType 'viewport'
    traits : [
        Trait.VIEWPORT
        Trait.SVG
    ]
    tagName : 'g'
    
    
    
    /**
     * @constructor
     * @param {GraphView} graph
     * @param {GraphNodeData} model
     */
    (graph, model) ->
        super ...
        
        # Trigger resize whenever a child is added
        @on 'child-built', @resize, this
        $ window .resize _.debounce @resize.bind(this), 50ms
    
    
    
    
    
    /* * * *  Viewport Sizing  * * * {{{ */
    
    # TODO: use a responsive algo to pick good numbers based on screen/device
    defaultWidth     : @computed -> 750
    defaultMinWidth  : @computed -> 750
    defaultMaxWidth  : @computed -> Infinity
    defaultHeight    : @computed -> 500
    defaultMinHeight : @computed -> 500
    defaultMaxHeight : @computed -> Infinity
    
    fullWidth  : @computed -> if @el() and @_resizeProxy() and (w = @$el.innerWidth())  > 0 then w else @defaultWidth()
    fullHeight : @computed -> if @el() and @_resizeProxy() and (h = @$el.innerHeight()) > 0 then h else @defaultHeight()
    
    frameWidth : @computed ->
        return unless model = @model()
        v = model.width()
        if not v? or v is 'auto'
            min = model.minWidth() ? @defaultMinWidth()
            max = model.maxWidth() ? @defaultMaxWidth()
            v   = min >? @fullWidth() <? max
        v
    
    frameHeight : @computed ->
        return unless model = @model()
        v = model.height()
        if not v? or v is 'auto'
            min = model.minHeight() ? @defaultMinHeight()
            max = model.maxHeight() ? @defaultMaxHeight()
            v   = min >? @fullHeight() <? max
        v
    
    margin         : { top:30, right:60, bottom:30, left:60 }
    viewportWidth  : @computed -> @frameWidth()  - @margin.left - @margin.right
    viewportHeight : @computed -> @frameHeight() - @margin.top  - @margin.bottom
    
    clipWidth      : @computed -> if (v = @viewportWidth())  > 0 then v else @defaultWidth()
    clipHeight     : @computed -> if (v = @viewportHeight()) > 0 then v else @defaultHeight()
    
    width          : @computed -> @clipWidth()
    height         : @computed -> @clipHeight()
    center         : @computed -> [ @width()/2, @height()/2 ]
    
    
    # }}}
    /* * * *  Watchers  * * * {{{ */
    
    watchDeps: ->
    watchOthers: ->
    
    
    
    # }}}
    /* * * *  Rendering  * * * {{{ */
    
    
    buildElement: (parentElement) ->
        el = super ...
        @trackCursor()
        el
    
    
    /* * * *  Viewport Events  * * * {{{ */
    
    
    /**
     * Trigger recalculation of values that depend on window size.
     */
    resize : -> @_resizeProxy {} if @el.peek()
    
    
    /**
     * Observable used to recalculate on changes to window size.
     * 
     * @protected
     * @type ko.observable<Object>
     */
    _resizeProxy : ko.observable {}
    
    
    /**
     * Current location of the cursor in the viewport.
     * @type ko.observable<Object>
     */
    cursor: ko.observable null
    
    
    trackCursor: ->
        return if @cursor.peek() # only initialize once
        return unless el  = @el.peek()
        return unless svg = _.toElement @graph.$('svg')
        svg = d3.select svg
        
        svg.on 'mousemove', ~>
            [x, y] = d3.mouse(el)
            cur = @cursor.peek()
            if not cur?.hovering or cur.x != x or cur.y != y
                @cursor { +hovering, x, y }
        
        svg.on 'mouseout', ~>
            @cursor { -hovering }
        
        this
    
    
    /**
     * Broadcast a zoom event.
     */
    zooming: (translate, scale) ->
        @trigger 'zoom-graph', translate, scale, this
    
    
    /**
     * register a handler for an event name so that child nodes can see parent events
     * @param {string} eventName
     * @param {Object} context the context to call the function in
     * @param {Function} fn the handling function
     */
    #FIXME: this doesn't work because of the changing / overwriting of the GraphNode tree.  Move to dependency tracking instead of events
    handle: (eventName, context, fn) ->
        @handlers ?= {}
        unless @handlers[eventName]
            @handlers[eventName] = []
            @on eventName, ~>
                for handler of @handlers[eventName]
                    handler.fn.apply handler.context, arguments
        
        existing = false
        for handler of @handlers[eventName]
            if handler.context is context
                handler.fn = fn
                existing = true
                break
        
        unless existing
            @handlers[eventName].push {fn, context}
    
    
    # }}}
    

