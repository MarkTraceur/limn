moment = require 'moment'

{ _, op,
} = require '../util'
{ Graph,
} = require './graph-model'
{ GraphView,
} = require './graph-view'
{ ChartView, #ChartElementData, ChartElementDataList, ChartElement, ChartView, ChartViewport,
} = require '../chart'

root = do -> this

/**
 * @class View for a graph visualization encapsulating.
 */
GraphDisplayView = exports.GraphDisplayView = GraphView.extend do
    __bind__    : <[ onGraphReady ]>
    tagName     : 'section'
    className   : 'graph graph-display'
    template    : require '../template/graph/graph-display'
    /**
     * The chart viewport element.
     * @type ChartView
     */
    chart       : null
    
    events:
        # Select the whole permalink URI text when it receives focus.
        'focus      .graph-permalink input' : 'onPermalinkFocus'
        'click      .export-button'         : 'exportChart'
        # 'click      .load-button'           : 'load'
    
    
    constructor: function GraphDisplayView
        GraphView ...
    
    initialize : (o={}) ->
        @data = {}
        GraphDisplayView.__super__.initialize ...
        
        @chartOptions @model.getOptions(), {+silent}
        @loadData()
        @model.once 'ready', @onGraphReady .load()
    
    onGraphReady: ->
        @addSubview @chart = new ChartView { @model }
    
    
    render: ->
        return this unless @ready and not @isRendering
        @wait()
        @checkWaiting()
        root.title = "#{@model.attributes.name} | Limn"
        GraphDisplayView.__super__.render ...
        @unwait()
        @checkWaiting()
        @isRendering = false
        this
    
    
    /**
     * Exports graph as png
     */
    exportChart: (evt) ->
        # TODO: We don't use the title of the chart, which is thus missing from the png.
        console.log "#this.export!"
        img = @$el.find '.export-image'
        # TODO: export d3 chart to img
        window.open img.src, "toDataURL() image"
    
    
    /**
     * Selects the graph permalink input field.
     */
    onPermalinkFocus: (evt) ->
        # defer to allow the select() to be the
        # last action that happens.  If we don't
        # defer, the focusing click will 
        # unselect the text.
        _.defer( ~> @$ '.graph-permalink input' .select() )

