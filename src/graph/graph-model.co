Seq = require 'seq'

{ _, op,
} = limn = require 'limn/client'
{ Cascade,
} = limn.util
{ BaseGraph, BaseGraphList,
} = require './base-graph'
{ ChartElementData, ChartElementDataList, ChartElement, ChartViewport,
} = require '../chart'
{ DataSet,
} = require '../data'

root = do -> this



/**
 * Represents a Graph, including its charting options, dataset, annotations, and all
 * other settings for both its content and presentation.
 */
Graph = exports.Graph = BaseGraph.extend do # {{{
    urlRoot : '/graphs'
    
    /**
     * Whether this Graph has loaded all assets, parent-graphs, and related
     * resources.
     * @type Boolean
     */
    ready : false
    
    /**
     * Whether this Graph has loaded the actual data needed to draw the chart.
     * @type Boolean
     */
    dataReady : false
    
    /**
     * List of graph parents. XXX: Obsolete?
     * @type GraphList
     */
    parents : null
    
    /**
     * List of chart element definitions.
     * @type ChartElementDataList
     */
    elements : null
    
    /**
     * Cascade of objects for options lookup (includes own options).
     * @type Cascade
     * @private
     */
    optionCascade : null
    
    
    
    
    /**
     * Attribute defaults.
     */
    defaults: ->
        slug      : ''
        
        name      : ''
        shortName : ''
        desc      : ''
        notes     : ''
        
        width     : 'auto'
        height    : 320
        parents   : <[ root ]>
        
        viewport :
            width  : 'auto'
            height : 320
        elements : []
    
    url: ->
        "#{limn.mount @urlRoot}/#{@get('slug')}.json"
    
    
    
    constructor: function Graph (attributes={}, opts)
        attributes.options or= {}
        attributes.slug    or= attributes.id if attributes.id?
        @optionCascade = new Cascade attributes.options
        BaseGraph.call this, attributes, opts
    
    
    initialize: (attributes) ->
        BaseGraph::initialize ...
        @parents = new GraphList
        @elements = new ChartElementDataList @get 'elements'
        @set 'elements', @elements, {+silent}
    
    
    
    ### Loading {{{
    
    load: (opts={}) ->
        return this if (@loading or @ready) and not opts.force
        # console.log "#this.load()..."
        @loading = true
        @wait()
        @trigger 'load', this
        Seq()
            # Fetch model if 
            .seq_ (next) ~>
                return next.ok() if @isNew()
                # console.log "#{this}.fetch()..."
                @wait()
                @fetch do
                    error : @unwaitAnd (err) ~>
                        console.error "#{this}.fetch() --> error! #{arguments}"
                        next.ok()
                    success : @unwaitAnd (model, res) ~>
                        # console.log "#{this}.fetch() --> success!", res
                        # Update the DataSet model with the new values
                        # @dataset.set @get 'data'
                        # @set 'data', @dataset, {+silent}
                        @elements = new ChartElementDataList @get 'elements'
                        @set 'elements', @elements, {+silent}
                        next.ok res
            
            # Load Parents...
            # .seq_ (next) ~>
            #     next.ok @get 'parents'
            # .flatten()
            # .seqMap_ (next, parent_id) ~>
            #     @wait()
            #     Graph.lookup parent_id, next
            # .seqEach_ (next, parent) ~>
            #     @parents.add parent
            #     @optionCascade.addLookup parent.get('options')
            #     @unwait()
            #     next.ok()
            
            # Load DataSet...
            # .seq_ (next) ~>
            #     @dataset.once 'ready', next.ok .load()
            
            # Done!
            .seq ~>
                # console.log "#{this}.load() complete!"
                @loading = false
                @unwait() # terminates the `load` wait
                @triggerReady()
        this
    
    
    loadData: (opts={}) ->
        @resetReady 'dataReady', 'data-ready' if opts.force
        return this if @loading or @dataReady
        
        unless @elements.length
            return @triggerReady 'dataReady', 'data-ready'
        
        # console.log "#this.loadData()..."
        @wait()
        @loading = true
        @trigger 'load-data', this
        Seq @elements.models
            .parEach_ (next, child) ->
                child.once 'ready', next.ok .load()
            .parEach_ (next, child) ~>
                child.once 'data-ready', next.ok .loadData()
            .seq ~>
                console.log "#{this}.loadData() complete!"
                @loading = false
                @unwait() # terminates the `load` wait
                @triggerReady 'dataReady', 'data-ready'
        this
    
    
    ### }}}
    ### Accessors {{{
    
    # get: (key) ->
    #     if _.startsWith key, 'options.'
    #         @getOption key.slice(8)
    #     else
    #         Graph.__super__.get.call this, key
    
    
    set: (key, value, opts) ->
        # Handle @set(values, opts)
        if _.isObject(key) and key?
            [values, opts] = [key, value]
        else
            values = { "#key": value }
        values = @parse values
        
        setter = Graph.__super__.set
        
        # Merge options in, firing granulated change events
        if values.options
            # Remove from values to prevent the super call to `set()` from
            # replacing the object wholesale.
            options = delete values.options
            
            # ...Unless we don't have one yet.
            if not @attributes.options
                setter.call this, {options}, {+silent}
            
            # Now delegate `setOption()` to do the nested merging.
            @setOption options, opts
        
        # Deal with everything else
        setter.call this, values, opts
    
    
    
    ### }}}
    ### Chart Option Accessors {{{
    
    hasOption: (key) ->
        @getOption(key) is void
    
    getOption: (key, def) ->
        @optionCascade.get key, def
    
    setOption: (key, value, opts={}) ->
        if _.isObject(key) and key?
            [values, opts] = [key, value or {}]
        else
            values = { "#key": value }
        
        # _.dump values, "#this.setOption"
        options = @get('options')
        changed = false
        for key, value in values
            continue if _.contains @IGNORE_OPTIONS, key
            changed = true
            _.setNested options, key, value, {+ensure}
            @trigger "change:options.#key", this, value, key, opts unless opts.silent
        
        if changed and not opts.silent
            @trigger "change:options",  this, options, 'options', opts
            @trigger "change",          this, options, 'options', opts
        this
    
    unsetOption: (key, opts={}) ->
        unless @optionCascade.unset(key) is void or opts.silent
            options = @get 'options'
            @trigger "change:options.#key", this, void, key, opts
            @trigger "change:options",      this, options, 'options', opts
            @trigger "change",              this, options, 'options', opts
        this
    
    inheritOption: (key, opts={}) ->
        old = @getOption(key)
        @optionCascade.inherit(key)
        unless @getOption(key) is old or opts.silent
            options = @get 'options'
            @trigger "change:options.#key", this, void, key, opts
            @trigger "change:options",      this, options, 'options', opts
            @trigger "change:options",      this, options, 'options', opts
        this
    
    getOptions: (opts={}) ->
        opts = {+keepDefaults, +keepUnchanged} import opts
        options = @optionCascade.collapse()
        for k, v in options
            delete options[k] if v is void or
                (not opts.keepDefaults  and @isDefaultOption k) or
                (not opts.keepUnchanged and not @isChangedOption k)
        options
    
    /**
     * @returns {Boolean} Whether the value for option `k` is inherited or not.
     */
    isOwnOption: (k) ->
        @optionCascade.isOwnValue k
    
    /**
     * @returns {Boolean} Whether the value for option `k` is the graph default or not.
     */
    isDefaultOption: (k) ->
        # TODO: replace old code to find whether this is the default option: @chartType.isDefault k, @getOption k
        false
    
    /**
     * Whether the value for option `k` differs from that of its parent graphs.
     * @returns {Boolean}
     */
    isChangedOption: (k) ->
        @optionCascade.isModifiedValue k
        and not @isDefaultOption k
    
    
    
    # }}}
    ### Serialization {{{
    
    parse: (data) ->
        data = JSON.parse data if typeof data is 'string'
        for k, v in data
            data[k] = Number v if v is not 'auto' and _.contains <[ width height ]>, k
            # data[k] = JSON.stringify v if k is 'parents'
        data
    
    # toJSON: (opts={}) ->
    #     opts = {+keepDefaults, +keepUnchanged} import opts
    #     # use jQuery's deep-copy implementation -- XXX: Deep-copy no longer necessary thanks to @getOptions()
    #     json = _.clone(@attributes) import { options:@getOptions(opts) }
    #     # { data: ...json }
    
    
    toKVPairs: (opts={}) ->
        opts = {-keepSlug, -keepDefaults, -keepUnchanged} import opts
        
        # use jQuery's deep-copy implementation
        kvo = @toJSON opts
        kvo.parents = JSON.stringify kvo.parents
        delete kvo.slug unless opts.keepSlug
        delete kvo.data
        
        # console.group 'toKVPairs'
        # console.log '[IN]', JSON.stringify kvo
        for k, v in kvo.options
            kvo.options[k] = @serialize v
        # console.log '[OUT]', JSON.stringify kvo
        # console.groupEnd()
        
        _.collapseObject kvo
    
    toKV: (opts) ->
        _.toKV @toKVPairs opts
    
    
    /**
     * @returns {String} URL identifying this model.
     */
    toURL: (action) ->
        slug = @get 'slug'
        path = limn.mount _.compact [ @urlRoot, slug, action ] .join '/'
        "#path?#{@toKV { keepSlug: !!slug }}"
    
    /**
     * @returns {String} Path portion of slug URL, e.g.  /graphs/:slug
     */
    toLink: ->
        "#{limn.mount @urlRoot}/#{@get('slug')}"
    
    /**
     * @returns {String} Permalinked URI, e.g. http://reportcard.wmflabs.org/:slug
     */
    toPermalink: ->
        "#{root.location.protocol}//#{window.location.host}#{@toLink()}"
    
    # }}}
    

# }}}


GraphList = exports.GraphList = BaseGraphList.extend do # {{{
    model : Graph
    constructor : function GraphList then BaseGraphList ...
    initialize  : -> BaseGraphList::initialize ...
# }}}



