#!/usr/bin/env coco

fs                      = require 'fs'
path    = {dirname}     = require 'path'
subproc = {exec, spawn} = require 'child_process'
exists  = fs.existsSync or path.existsSync

express        = require 'express'
LimnMiddleware = require './middleware'
config         = require './config' # NOTE: server/config.json is a private file and should never be included with the source
helpers        = {}
users          = {}

/**
 * Create server
 */
app = exports = module.exports = express.createServer()



/**
 * Authentication via passport js and OAuth
 */
passport        = require 'passport'
GoogleStrategy  = require 'passport-google' .Strategy;

#app.use express.static('public')
app.use express.cookieParser()
app.use express.bodyParser()
app.use express.session({ secret: config.secret or 'not secure' })
app.use passport.initialize()
app.use passport.session()

passport.serializeUser (user, done) -> done(null, user.id)
passport.deserializeUser (id, done) -> done(null, users[id])

passport.use(
    'google', new GoogleStrategy(
        {
            returnURL: config.web.redirect_uris[0],
            realm: config.web.javascript_origins[0]
        },
        #User.findOrCreate({ openId: identifier }, (err, user) -> done(err, user))
        (identifier, profile, done) ->
            profile.id = identifier
            profile.email = profile.emails[0].value
            user = users[profile.id] ?= profile
            done(null, user)
    )
)

# Redirect the user to Google for authentication.  When complete, Google
# will redirect the user back to the application at
#     /auth/google/callback
app.get('/auth/google', passport.authenticate('google'))

# Google will redirect the user to this URL after authentication.  Finish
# the process by verifying the assertion.  If valid, the user will be
# logged in.  Otherwise, authentication has failed.
app.get('/auth/google/callback', passport.authenticate('google', {
        successRedirect: '/graphs/timeseries_example/edit',
        failureRedirect: '/auth/google'
}))

helpers.auth = (req, res) -> { isAuthenticated: req.isAuthenticated(), user: req.user }




/**
 * Load Limn middleware
 */
limn = app.limn = LimnMiddleware do
    varDir  : process.env.LIMN_VARDIR or './var'
    proxy   :
        enabled   : true
        whitelist : '*' #/.*/ throws an error in minimatch - does not support regex as assumed

# app.use express.compress()
app.use limn
# app.use '/vis', limn

# show exceptions, pretty stack traces ### FIXME
app.use express.errorHandler { +dumpExceptions, +showStack }

# add any helpers defined above
app.dynamicHelpers(helpers)

mainfile = path.basename require.main?.filename
if require.main is module or 'Cokefile' is mainfile
    PORT = 8081
    PORT = parseInt(that, 10) if process.env.LIMN_PORT
    
    NODE_ENV    = process.env.NODE_ENV    or 'development'
    LIMN_VARDIR = process.env.LIMN_VARDIR or './var'
    LIMN_DATA   = "#LIMN_VARDIR/data"
    
    REV = process.env.LIMN_REV or 'HEAD'
    try REV = require '../src/version' catch e
    
    console.log s = "Limn Server (port=#PORT, env=#NODE_ENV, rev=#REV, vardir=#LIMN_VARDIR, data=#LIMN_DATA)"
    console.log '=' * s.length
    app.listen PORT
