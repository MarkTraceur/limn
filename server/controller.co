express  = require 'express'
Resource = require 'express-resource'

hasOwn = Object::hasOwnProperty

/**
 * @class Resource controller for easily subclassing an express Resource.
 */
class Controller extends Resource
    /**
     * Singular, lowercase resource-noun.
     * @optional
     * @type String
     * @example "user"
     */
    id : null
    
    /**
     * Plural, lowercase resource-noun.
     * @required
     * @type String
     * @example "users"
     */
    name : null
    
    /**
     * Resource routing prefix.
     * @optional
     * @type String
     */
    base : '/'
    
    /**
     * Default format.
     * @type String
     */
    format : null
    
    /**
     * Hash of sub-routes. Keys are routes, and values are either:
     *  - String: the name of a method to be used for used for all HTTP-methods
     *    for this sub-route.
     *  - Object: Hash of HTTP-method (get, put, post, del, or all) to the name
     *    of a method on this Controller.
     * 
     * Example:
     *      { '/foo' => 'foo',
     *        '/bar' => {'get' => 'get_bar', 'del' => 'delete_bar' },
     *      }
     *      If this mapping is in a controller with name 'nonya', then
     *          GET     '/nonya/foo' -> NonyaController.foo(),
     *          GET     '/nonya/bar' -> NonyaController.get_bar()
     *          DELETE  '/nonya/bar' -> NonyaController.delete_bar()
     * 
     * @type Object
     */
    mapping : null
    
    
    
    /**
     * @constructor
     */
    (@app, name) ->
        @routes or= {}
        
        # Bind all methods and make actions object
        actions = {}
        for k, fn in this
            continue unless typeof fn is 'function' and k is not 'constructor'
            actions[k] = this[k] = fn.bind this
        
        # Replace/remove .load, as by default it's Resource#load
        delete actions.load
        if typeof actions.autoload is 'function'
            actions.load = actions.autoload
        
        (@app.resources or= {})[@name] = this
        @applyControllerMapping()
        super (name or @name), actions, @app
    
    
    /**
     * Apply the contents of a mapping hash.
     * @private
     */
    applyControllerMapping: (mapping=@mapping) ->
        for subroute, methods in mapping
            if typeof methods is 'string'
                methods = { all:methods }
            for verb, method in methods
                @map verb, subroute, @[method]
        this
    
    
    /**
     * Boilerplate for creating a error-handling callback that otherwise returns JSON {result:'ok'}.
     * @param {Response} res Express response object.
     * @param {String} msg Error message to send on failure.
     * @param {Number} [code=500] HTTP error code to send on failure.
     * @returns {Function} Error-handling callback.
     */
    errorHandler: (res, msg, code=500) ->
        (err) ->
            if err
                msg or= err.message or String(err)
                console.error msg
                res.send { result:"error", message:msg }, code
            else
                res.send { result:"ok" }
    
    
    getClassName: ->
        "#{@..name or @..displayName}"
    
    toString: ->
        "#{@getClassName()}(name='#{@name}')"


express.HTTPServer::controller  = \
express.HTTPSServer::controller = (name, ControllerClass, opts) ->
    [opts, ControllerClass, name] = [ControllerClass, name, null] if typeof name is 'function'
    new ControllerClass this, name


module.exports = exports = Controller
