# Utilities for use in templates

fs    = exports.fs   = require 'fs'
path  = exports.path = require 'path'

{dirname} = path
BASE   = exports.BASE   = dirname dirname __dirname
WWW    = exports.WWW    = "#BASE/www"
VAR    = exports.VAR    = "#BASE/var"
STATIC = exports.STATIC = "#BASE/static"

VERSION = 'HEAD'
try VERSION = require '../version' catch e
exports.VERSION = exports.version = VERSION

_     = exports._ = require 'underscore'
_.str = require 'underscore.string'
_.mixin _.str.exports()


yaml = exports.yaml = require 'js-yaml'
jade = exports.jade = require 'jade'

exports.env = process.env
NODE_ENV = exports.NODE_ENV = (process.env.NODE_ENV or 'development').toLowerCase()
IS_PROD  = exports.IS_PROD  = NODE_ENV is 'production'
IS_TEST  = exports.IS_TEST  = NODE_ENV is 'test'
IS_DEV   = exports.IS_DEV   = not (IS_PROD or IS_TEST)



SOURCES_ENV = if process.env.LIMN_FORCE_BUNDLES then 'production' else NODE_ENV

/**
 * Reify a modules.yaml file
 */
sources = exports.sources = (node_env=SOURCES_ENV, modulesFile="#WWW/modules.yaml") ->
    mods = yaml.load fs.readFileSync modulesFile, 'utf8'
    modlist = (mods.all or []).concat (mods[node_env] or [])
    _.flatten modlist.map ({suffix or '', paths}) -> joinTree('', paths).map -> it+suffix

joinTree = exports.joinTree = function joinTree(root, tree)
    return ["#root/#tree"] if typeof tree is 'string'
    _ tree .reduce do
        (acc, branch) ->
            if typeof branch is 'string'
                acc.push "#root/#branch"
            else
                _.each branch, (v, k) ->
                    acc.push.apply acc, joinTree "#root/#k", v
            acc
        []

