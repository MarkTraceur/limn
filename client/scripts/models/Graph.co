define ['Storage', 'elements/Base'], (Storage, BaseElement) ->
    # needs to extend from BaseElement for populateTypeInformation, maybe there's a better way (like a mixin)
    class Graph extends BaseElement
        (id) ->
            self = this
            self.elements = ko.observableArray([])
            
            self.elementsToLoad = ko.observable -1
            # TODO: remove hack to let populateTypeInformation finish setting the elements collection
            self.changingElements = ko.observable false
            self.elementsLoaded = ko.computed -> self.elementsToLoad() is 0 and not self.changingElements()
            self.ready = ko.observable false
            
            Storage.loadGraph id, (json) ->
                temporaryObject = ko.mapping.fromJSON json
                self.elementsToLoad self.countElements temporaryObject.elements
                self.populateTypeInformation temporaryObject.elements
                self.elementsLoaded.subscribe (loaded) ->
                    if loaded
                        self.populateChart temporaryObject.elements
                        $.extend(true, self, temporaryObject)
                        self.ready true
        
        /**
         * Converts, in place, the items in an observable array to children of @see elements/Base
         * MAGIC: dynamically figures out what type each member of the elements array wants to be instantiated as
         * @param {ko.observableArray} elements a knockout observable array
         */
        populateTypeInformation: (elements) ->
            self = this
            elements ?= ko.observableArray()
            typeNames = elements().map (el) -> "elements/#{el.elementType()}"
            require typeNames, ->
                types = arguments
                self.changingElements true
                elements elements().map (el, i) ->
                    el = $.extend(true, new types[i](), el)
                    el.initialize()
                    self.populateTypeInformation el.elements
                    self.elementsToLoad self.elementsToLoad()-1
                    el
                self.changingElements false
        
        /**
         * Counts the number of elements that we have to load.  Used to compute the ready observable
         * @param {ko.observableArray} elements a knockout observable array
         */
        countElements: (elements) ->
            elements ?= ko.observableArray()
            childElements = 0
            for element of elements()
                childElements += @countElements element.elements
            elements().length + childElements
        
        /**
         * Finds the first element that declares isChart
         * Populates the chart property of all the other elements to the found element
         * TODO: enforce chart is at top level
         * @param {ko.observableArray} elements a knockout observable array
         */
        populateChart: (elements, chart) ->
            return unless elements?()
            self = this
            chart ?= _.find elements(), (el) -> el.isChart
            
            _.each elements(), (el) ->
                el.chart = chart unless el.isChart
                self.populateChart el.elements, chart
