vows   = require 'vows'
assert = require 'assert'
ko     = require 'knockout'

# Require Limn's client-side entry point to ensure things are set up properly
limn   = require '../src'

{ Model,
} = require '../src/model'




class exports.Person extends Model
    defaults: ->
        name : ''
        age  : 18
    -> super ...
    getId: -> @get 'name'

class exports.Classroom extends Model
    defaults: ->
        room     : null
        name     : ''
        teacher  : null
        students : []
    attributeTypes :
        teacher  : Person
        students : Person
    
    -> super ...
    getId: -> @get 'room'


mathClassData = exports.mathClassData =
    room : "1A"
    name : "math class"
    teacher:
        name : "Mr. Jones"
        age  : 42
    students:
        *   name : "Alex"
        *   name : "Maria"
            age  : 17


vows.describe 'Model'
    .addBatch do
        'An empty Model':
            topic: -> new Model()
            'has the right defaults': (model) ->
                assert.
        
    
    .addBatch do
        'An empty Model':
            topic: -> new Model()
            'serializes to JSON':
                topic: (model) ->
                    JSON.stringify model
                'as an empty object': (topic) ->
                    assert.equal topic, "{}"
            'initialized with a plain object':
                topic: (model) ->
                    modelFromObject = new Model(bareObject)
                    JSON.stringify modelFromObject
                'we get the same JSON we constructed it with': (topic) ->
                    assert.equal topic, bareJSON
        
        'when serializing a model with JSON after it was modified':
            topic: ->
                modelFromObject = new Model(bareObject)
                modelFromObject.set 'name', 'mathematics class'
                modelFromObject.unset 'students'
                JSON.stringify modelFromObject
            'the JSON changes as expected': (topic) ->
                assert.equal topic, '{"name":"mathematics class","room":"1A","teacher":"Jones"}'
        
        'when serializing a model with JSON after it was modified without Model::set':
            topic: ->
                modelFromObject = new Model(bareObject)
                modelFromObject.name 'mathematics class'
                JSON.stringify modelFromObject
            'we get the original JSON': (topic) ->
                assert.equal topic, bareJSON
    .export(module)

