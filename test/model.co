vows   = require 'vows'
assert = require 'assert'
ko     = require 'knockout'

# Require Limn's client-side entry point to ensure things are set up properly
limn   = require '../src'

{ Model,
} = require '../src/model'




class exports.Person extends Model
    defaults: ->
        name : ''
        age  : 18
    -> super ...
    getId: -> @get 'name'

class exports.Classroom extends Model
    defaults: ->
        room     : null
        name     : ''
        teacher  : null
        students : []
    attributeTypes :
        teacher  : Person
        students : Person
    
    -> super ...
    getId: -> @get 'room'


mathClassData = exports.mathClassData =
    room : "1A"
    name : "math class"
    teacher:
        name : "Mr. Jones"
        age  : 42
    students:
        *   name : "Alex"
        *   name : "Maria"
            age  : 17


bareModel = new Model()
bareJSON = '{"name":"math class","room":"1A","teacher":{"name":"Mr. Jones","age":42},"students":[{"name":"Alex"},{"name":"Maria","age":17}]}'
bareObject = JSON.parse bareJSON

/**
 * helper that logs test errors to the console instead of letting vows swallow them
 * @param {function} topic is the function to wrap in a try catch
 * @returns {function} which can be invoked by vows just like the anonymous functions passed to topic:
 */
function reporter (topic)
    return ->
        try
            topic.call this
        catch
            console.log "Test ***#{this.context.name}*** threw an exception: #e"
            throw e

vows.describe 'Model'
    .addBatch do
        'An empty Model':
            topic: -> new Model()
            'has the right defaults': (model) ->
                assert.equal model, null # FIXME was a half-finished line
        
    
    .addBatch do
        'An empty Model':
            topic: -> new Model()
            'serializes to JSON':
                topic: (model) ->
                    JSON.stringify model
                'as an empty object': (topic) ->
                    assert.equal topic, "{}"
            'initialized with a plain object':
                topic: (model) ->
                    modelFromObject = new Model(bareObject)
                    JSON.stringify modelFromObject
                'we get the same JSON we constructed it with': (topic) ->
                    assert.equal topic, bareJSON
        
        'create from JSON, modify, serialize':
            topic: ->
                modelFromObject = new Model(bareObject)
                modelFromObject.set 'name', 'mathematics class'
                modelFromObject.unset 'students'
                JSON.stringify modelFromObject
            'the JSON changes as expected': (topic) ->
                assert.equal topic, '{"name":"mathematics class","room":"1A","teacher":"Jones"}'
        
        'create from JSON, modify without Model::set, serialize':
            topic: ->
                modelFromObject = new Model(bareObject)
                modelFromObject.name 'mathematics class'
                JSON.stringify modelFromObject
            'the JSON changes as expected': (topic) ->
                assert.equal topic, '{"name":"mathematics class","room":"1A","teacher":"Jones","students":[{"name":"Alex"},{"name":"Maria"}]}'
        
        'create empty, add observables to the instance, serialize':
            topic: ->
                modelFromEmtpy = new Model()
                modelFromEmtpy.name = ko.observable 'dan'
                modelFromEmtpy.description = ko.observable 'person'
                JSON.stringify modelFromEmtpy
            'the JSON does not contain the new observables': (topic) ->
                assert.equal topic, '{}'
        
        'create empty, add attributes, serialize':
            topic: reporter ->
                modelFromEmpty = new Model()
                modelFromEmpty.set 'name', 'dan'
                modelFromEmpty.set 'description', 'person'
                JSON.stringify modelFromEmpty
            'the JSON contains the added attributes': (topic) ->
                assert.equal topic, '{"name":"dan","description":"person"}'
    .export(module)

