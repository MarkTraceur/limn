Model = limn.Model

/******** Model ********/
module 'Model', do
    setup: ->
    teardown: ->

test 'create empty, serialize', ->
    emptyModel = new Model()
    serialized = JSON.stringify(emptyModel)
    strictEqual serialized, "{}", 'empty JSON object'

test 'initialize with a plain object, serialize', ->
    modelFromObject = new Model(basicObject)
    serialized = JSON.stringify(modelFromObject)
    strictEqual serialized, basicJSON, 'JSON representation of the plain object'

test 'create from JSON, modify, serialize', ->
    modelFromObject = new Model(basicObject)
    modelFromObject.set 'name', 'mathematics class'
    serialized = JSON.stringify modelFromObject
    strictEqual serialized, '{"name":"mathematics class","room":"1A"}', 'the JSON changes as expected'

test 'create from JSON, modify without Model::set, serialize', ->
    modelFromObject = new Model(basicObject)
    modelFromObject.name 'mathematics class'
    serialized = JSON.stringify modelFromObject
    strictEqual serialized, '{"name":"mathematics class","room":"1A"}', 'the JSON changes as expected'

test 'create empty, add observables to the instance, serialize', ->
    modelFromEmtpy = new Model()
    modelFromEmtpy.name = ko.observable 'dan'
    modelFromEmtpy.description = ko.observable 'person'
    serialized = JSON.stringify modelFromEmtpy
    strictEqual serialized, '{}', 'the JSON does not contain the new observables'

test 'create empty, add attributes, serialize', ->
    modelFromEmpty = new Model()
    modelFromEmpty.set 'name', 'dan'
    modelFromEmpty.set 'description', 'person'
    serialized = JSON.stringify modelFromEmpty
    strictEqual serialized, '{"name":"dan","description":"person"}', 'the JSON contains the added attributes'


/******** Inheriting Model ********/
module 'Inheriting Model', do
    setup: ->
    teardown: ->

test 'create empty', ->
    person = new Person()
    strictEqual person.get('name'), '', 'string attribute default is set'
    strictEqual person.get('age'), 18, 'int attribute default is set'
    strictEqual person.name(), '', 'string default copied to object'
    strictEqual person.age(), 18, 'int default copied to object'

test 'create from object with non-default values', ->
    old = (new Date()).getFullYear() - 1981
    person = new Person({name:'Dan',age:old})
    strictEqual person.name(), 'Dan', 'string default ignored'
    strictEqual person.age(), old, 'int default ignored'


/******** Typed Model ********/
test 'create empty', ->
    classroom = new Classroom()
    strictEqual classroom.teacher(), null, 'complex property not initialized'
    
    classroom.teacher(new Person())
    strictEqual classroom.teacher().age(), 18, 'property typed correctly and defaults set'
    strictEqual classroom.get('teacher').get('age'), 18, 'getters work the same as copies on object'
    
    classroom.get('students').push(new Person())
    strictEqual classroom.get('students')[0].age(), 18, 'array item typed correctly and defaults set'
    
    # TODO: this throws an error: classroom.students.push(new Person())
    classroom.students().push(new Person())
    strictEqual classroom.students()[1].age(), 18, 'array item typed correctly and defaults set - through copied property'

test 'create empty with array default', ->
    classroom = new TypicalClassroom()
    strictEqual classroom.students()[0].name(), 'Goody Two-Shoe', 'array item default typed correctly'
    strictEqual classroom.get('students')[0].name(), 'Goody Two-Shoe', 'getters work the same as copies on object'
    

class Person extends Model
    defaults: ->
        name : ''
        age  : 18
    -> super ...
    getId: -> @get 'name'

class Classroom extends Model
    defaults: ->
        room     : null
        name     : ''
        teacher  : null
        students : []
    attributeTypes :
        teacher  : Person
        students : Person
    
    -> super ...
    getId: -> @get 'room'

class TypicalClassroom extends Model
    defaults: ->
        room     : null
        name     : ''
        teacher  : null
        students : [new Person({name:'Goody Two-Shoe'})]
    attributeTypes :
        teacher  : Person
        students : Person
    
    -> super ...
    getId: -> @get 'room'

mathClassData =
    room : "1A"
    name : "math class"
    teacher:
        name : "Mr. Jones"
        age  : 42
    students:
        *   name : "Alex"
        *   name : "Maria"
            age  : 17

bareModel = new Model()
basicJSON = '{"name":"math class","room":"1A"}'
basicObject = JSON.parse basicJSON
complexJSON = '{"name":"math class","room":"1A","teacher":{"name":"Mr. Jones","age":42},"students":[{"name":"Alex"},{"name":"Maria","age":17}]}'
complexObject = JSON.parse complexJSON
