vows = require 'vows'
assert = require 'assert'

ko = require 'knockout'
ko.mapping = require '../static/vendor/knockout.mapping.js' unless ko.mapping

{ Model,
} = require '../src/model'


class Person extends Model
    idAttribute : 'name'
    defaults: ->
        name : ''
        age  : 18
    -> super ...

class Classroom extends Model
    idAttribute : 'room'
    defaults: ->
        room     : ''
        name     : ''
        teacher  : null
        students : []
    attributeTypes :
        teacher  : Person
        students : Person
    
    -> super ...


data =
    room : "1A"
    name : "math class"
    teacher:
        name : "Mr. Jones"
        age  : 42
    students:
        *   name : "Alex"
        *   name : "Maria"
            age  : 17


bareModel = new Model()
bareJSON = '{"name":"math class","room":"1A","teacher":{"name":"Mr. Jones","age":42},"students":[{"name":"Alex"},{"name":"Maria","age":17}]}'
bareObject = JSON.parse bareJSON

vows
    .describe('Model Serialization')
    .addBatch do
        'when serializing an empty model':
            topic: ->
                JSON.stringify bareModel
            'we get JSON representing an empty object': (topic) ->
                assert.equal topic, "{}"
        
        'when serializing a model with JSON':
            topic: ->
                modelFromObject = new Model(bareObject)
                JSON.stringify modelFromObject
            'we get the same JSON we constructed it with': (topic) ->
                assert.equal topic, bareJSON
        
        'when serializing a model with JSON after it was modified':
            topic: ->
                modelFromObject = new Model(bareObject)
                modelFromObject.set 'name', 'mathematics class'
                modelFromObject.unset 'students'
                JSON.stringify modelFromObject
            'the JSON changes as expected': (topic) ->
                assert.equal topic, '{"name":"mathematics class","room":"1A","teacher":"Jones"}'
        
        'when serializing a model with JSON after it was modified without Model::set':
            topic: ->
                modelFromObject = new Model(bareObject)
                modelFromObject.name 'mathematics class'
                JSON.stringify modelFromObject
            'we get the original JSON': (topic) ->
                assert.equal topic, bareJSON
    .export(module)

