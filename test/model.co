Model = limn.Model

module 'Model', do
    setup: ->
    teardown: ->

test 'create empty, serialize', ->
    emptyModel = new Model()
    serialized = JSON.stringify(emptyModel)
    strictEqual serialized, "{}", 'empty JSON object'

test 'initialize with a plain object, serialize', ->
    modelFromObject = new Model(basicObject)
    serialized = JSON.stringify(modelFromObject)
    strictEqual serialized, basicJSON, 'JSON representation of the plain object'

test 'create from JSON, modify, serialize', ->
    modelFromObject = new Model(basicObject)
    modelFromObject.set 'name', 'mathematics class'
    serialized = JSON.stringify modelFromObject
    strictEqual serialized, '{"name":"mathematics class","room":"1A"}', 'the JSON changes as expected'

test 'create from JSON, modify without Model::set, serialize', ->
    modelFromObject = new Model(basicObject)
    modelFromObject.name 'mathematics class'
    serialized = JSON.stringify modelFromObject
    strictEqual serialized, '{"name":"mathematics class","room":"1A"}', 'the JSON changes as expected'

test 'create empty, add observables to the instance, serialize', ->
    modelFromEmtpy = new Model()
    modelFromEmtpy.name = ko.observable 'dan'
    modelFromEmtpy.description = ko.observable 'person'
    serialized = JSON.stringify modelFromEmtpy
    strictEqual serialized, '{}', 'the JSON does not contain the new observables'

test 'create empty, add attributes, serialize', ->
    modelFromEmpty = new Model()
    modelFromEmpty.set 'name', 'dan'
    modelFromEmpty.set 'description', 'person'
    serialized = JSON.stringify modelFromEmpty
    strictEqual serialized, '{"name":"dan","description":"person"}', 'the JSON contains the added attributes'

class Person extends Model
    defaults: ->
        name : ''
        age  : 18
    -> super ...
    getId: -> @get 'name'

class Classroom extends Model
    defaults: ->
        room     : null
        name     : ''
        teacher  : null
        students : []
    attributeTypes :
        teacher  : Person
        students : Person
    
    -> super ...
    getId: -> @get 'room'

mathClassData =
    room : "1A"
    name : "math class"
    teacher:
        name : "Mr. Jones"
        age  : 42
    students:
        *   name : "Alex"
        *   name : "Maria"
            age  : 17

bareModel = new Model()
basicJSON = '{"name":"math class","room":"1A"}'
basicObject = JSON.parse basicJSON
complexJSON = '{"name":"math class","room":"1A","teacher":{"name":"Mr. Jones","age":42},"students":[{"name":"Alex"},{"name":"Maria","age":17}]}'
complexObject = JSON.parse complexJSON
