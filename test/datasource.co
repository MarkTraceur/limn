DataSource = limn.data.DataSource
util = limn.util

{ TimeSeriesData, CSVData,
} = require 'timeseries'


/******** DataSource cache ********/
module 'DataSource', do
    setup: ->
    teardown: ->

asyncTest 'create two DataSources', ->
    sameId = 'rc_edits_count'
    fetching1 = DataSource.lookup sameId
    fetching2 = DataSource.lookup sameId
    
    ds1 = DataSource.get sameId
    ds2 = DataSource.get sameId
    
    strictEqual ds1, ds2, 'only one DataSource will get created per id if using lookup'
    strictEqual fetching1, fetching2, 'only one promise to fetch will get created by lookup'
    
    fetching2.done ->
        ok true, 'second datasource is fetched'
        
        fetching1.done ->
            start()
            ok ds1.name() != undefined, 'model attributes get loaded'
            ok ds1.name() != "", 'model attributes get loaded'


asyncTest 'lazy-load DataSource data', ->
    id = 'rc_page_requests'
    DataSource.lookup id, (err, ds) ->
        start()
        equal err, null, "No errors on DataSource.lookup()."
        ok not ds.isNew(), "DataSource has been loaded from server."
        ok ds.get('url'), "DataSource has been loaded and has a valid data URL."
        strictEqual ds.data.inProgress(), false, "DataSource.data.inProgress is false at first."
        equal ds.data(), null, "DataSource.data() is undefined at first (this check triggers loading)"
        strictEqual ds.data.inProgress(), true, "DataSource.data.inProgress is true now that we're loading."
        stop()
        ds.data.subscribe ->
            start()
            ok ds.data(), "DataSource.data() now defined"
            ok ds.data() instanceof CSVData, "DataSource.data() instanceof CSVData"

